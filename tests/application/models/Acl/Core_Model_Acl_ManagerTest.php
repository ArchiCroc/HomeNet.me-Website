<?php

/**
 * Test class for Core_Model_Acl_Service.
 * Generated by PHPUnit on 2011-06-27 at 19:48:52.
 */
class Core_Model_Acl_ManagerTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Core_Model_Acl_Service
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
        Core_Model_Installer::install();

        $uService = new Core_Model_User_Service();
        $user = $uService->getObjectById(Core_Model_Installer::$userMember);
        
        $this->object = new Core_Model_Acl_Manager($user);
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        Core_Model_Installer::uninstall();
    }


    public function testSetUser() {
        $user = new Core_Model_User();
        $this->object->setUser($user);
        
        $this->assertInstanceOf('Core_Model_User', $this->object->getUser());
        
    }

    public function testGetResources() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testGetResourcesByModule() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
    
    public function testGetBaseAcl(){
        $result = $this->object->getBaseAcl('core');
        $this->assertInstanceOf('CMS_Acl', $result);
    }

    
    public function testGetGroupAcl() {
        $uService = new Core_Model_User_Service();
        $user = $uService->getObjectById(Core_Model_Installer::$userGuest);
        
        $this->object = new Core_Model_Acl_Manager($user);
        
        
        $result = $this->object->getGroupAcl('core');
        $this->assertInstanceOf('Zend_Acl', $result);
        $this->assertTrue($result->isAllowed(new CMS_Acl_Role_Group(Core_Model_Installer::$groupGuest), new CMS_Acl_Resource_Controller('index')));
         
         
    }
    
    
    public function testGetUserAcl() {
        $result = $this->object->getUserAcl('core');
        $this->assertInstanceOf('Zend_Acl', $result);
        $this->assertTrue($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Controller('index')));
    }


    public function testGetGroupAclObjects() {
        $result = $this->object->getGroupAclObjects('core','gTest',array(1,2,3));
        $this->assertInstanceOf('Zend_Acl', $result);
        
        $this->assertTrue ($result->isAllowed(new CMS_Acl_Role_Group(Core_Model_Installer::$groupMember), new CMS_Acl_Resource_Controller('gTest'),'index'));
        $this->assertFalse($result->isAllowed(new CMS_Acl_Role_Group(Core_Model_Installer::$groupMember), new CMS_Acl_Resource_Controller('gTest'),'edit'));
        $this->assertTrue ($result->isAllowed(new CMS_Acl_Role_Group(Core_Model_Installer::$groupMember), new CMS_Acl_Resource_Controller('gTest'),'add'));
        $this->assertTrue ($result->isAllowed(new CMS_Acl_Role_Group(Core_Model_Installer::$groupMember), new CMS_Acl_Resource_Object('gTest',1),'edit'));
        $this->assertFalse($result->isAllowed(new CMS_Acl_Role_Group(Core_Model_Installer::$groupMember), new CMS_Acl_Resource_Object('gTest',2),'edit'));
        $this->assertFalse($result->isAllowed(new CMS_Acl_Role_Group(Core_Model_Installer::$groupMember), new CMS_Acl_Resource_Object('gTest',3),'edit'));
        
        
    }


    public function testGetUserAclObjects() {
       $result = $this->object->getUserAclObjects('core','uTest',array(1,2,3));
       $this->assertInstanceOf('Zend_Acl', $result);
       
           $this->assertTrue($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Controller('uTest'),'index'));
        $this->assertFalse($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Controller('uTest'),'edit'));
        $this->assertTrue($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Controller('uTest'),'add'));
        $this->assertTrue($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Object('uTest',1),'edit'));
        $this->assertFalse($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Object('uTest',2),'edit'));
        $this->assertFalse($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Object('uTest',3),'edit'));
       
       
    }
    
    public function testUserMemberAllowed(){
        $result = $this->object->getUserAcl('core');
        $this->assertInstanceOf('Zend_Acl', $result);
        $this->assertTrue($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Controller('index'),'index'));
        $this->assertTrue($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Controller('user'),'add'));
    }
    
    public function testUserMemberDenied(){
        $result = $this->object->getUserAcl('core');
        $this->assertFalse($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Controller('login'),'index'));
    }
    public function testUserMemberInvalidControllerDenied(){
        $result = $this->object->getUserAcl('core');
        $this->assertFalse($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Controller('notInPermissions'),'index'));
    }
    
    public function testGroupMemberAllowed(){
         $result = $this->object->getGroupAcl('core');
        $this->assertInstanceOf('Zend_Acl', $result);
        $this->assertTrue($result->isAllowed(new CMS_Acl_Role_Group(Core_Model_Installer::$groupMember), new CMS_Acl_Resource_Controller('index')));
    }
    
    public function testGroupMemberDenied(){
         $result = $this->object->getGroupAcl('core');
        $this->assertInstanceOf('Zend_Acl', $result);
        $this->assertFalse($result->isAllowed(new CMS_Acl_Role_Group(Core_Model_Installer::$groupMember), new CMS_Acl_Resource_Controller('login')));
    }
    public function testModuleDoesNotExistIsDenied(){
        $result = $this->object->getUserAcl('core');
        $this->assertFalse($result->isAllowed(new CMS_Acl_Role_User(Core_Model_Installer::$userMember), new CMS_Acl_Resource_Controller('notInPermissions'),'index'));
    }

}