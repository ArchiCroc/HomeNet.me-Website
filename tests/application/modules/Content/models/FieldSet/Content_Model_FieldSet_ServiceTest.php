<?php

//require_once dirname(__FILE__) . '/../../../../../../application/modules/Content/models/FieldSet/Service.php';

/**
 * Test class for Content_Model_FieldSet_Service.
 * Generated by PHPUnit on 2011-06-22 at 08:00:46.
 */
class Content_Model_FieldSet_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Content_Model_Category_Service
     */
    protected $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->service = new Content_Model_FieldSet_Service();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->service->deleteAll();
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Content_Model_FieldSet_MapperInterface', $this->service->getMapper());
    }

    /**
     * @todo Implement testSetMapper().
     */
    public function testSetMapper() {
        
        $mapper = new Content_Model_FieldSet_MapperDbTable();
         $this->service->setMapper($mapper);
        
        $this->assertInstanceOf('Content_Model_FieldSet_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
        //$this->ass
    }

    private function createValidObject() {
        
        $fieldSet = new Content_Model_FieldSet();
        $fieldSet->section = 1;
        $fieldSet->title = 'testTitle2';
        $fieldSet->visible = true;

        $this->service->create($fieldSet);
        
        $fieldSet = new Content_Model_FieldSet();
        $fieldSet->section = 1;
        $fieldSet->title = 'testTitle';
        $fieldSet->visible = true;

        $result = $this->service->create($fieldSet);

        $this->assertInstanceOf('Content_Model_FieldSet_Interface', $result);
        return $result;
    }
    
    public function testCreateNullSectionFieldSet() {
        $fieldSet = new Content_Model_FieldSet();
        $fieldSet->section = null;
        $fieldSet->title = 'testTitle';
        $fieldSet->visible = true;
        $this->setExpectedException('Exception');
        $result = $this->service->create($fieldSet);

    }
    
    public function testCreateInvalidFieldSet() {
        $fieldSet = new Content_Model_FieldSet();
        $fieldSet->section = null;
        //$fieldSet->title = 'testTitle';
        $fieldSet->visible = true;
        $this->setExpectedException('Exception');
        $result = $this->service->create($fieldSet);
    } 
    
    public function testCreateValidFromObject() {

        $result = $this->createValidObject();

        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->section);
        $this->assertEquals('testTitle', $result->title);
        $this->assertEquals(true, $result->visible);
    }
    
    public function testCreateFromArray() {

        $object = array(
        'section' => 1,
        'title' => 'testTitle',
        'visible' => false);

        $result = $this->service->create($object);

        $this->assertInstanceOf('Content_Model_FieldSet_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->section);
        $this->assertEquals('testTitle', $result->title);
        $this->assertEquals(false, $result->visible);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->create($badObject);
    }

    public function testGetObjectById() {

        //setup
        $object = $this->createValidObject();

        //test getObject
        $result = $this->service->getObjectById($object->id);
        
        $this->assertInstanceOf('Content_Model_FieldSet_Interface', $result);

        $this->assertEquals($object->id, $result->id);
        $this->assertEquals(1, $result->section);
        $this->assertEquals('testTitle', $result->title);
        $this->assertEquals(true, $result->visible);
    }

    public function testUpdateFromObject() {

        //setup
        $object = $this->createValidObject();

        //update values
        $object->section = 2;
        $object->title = 'testTitle2';
        $object->visible = false;

        $result = $this->service->update($object);

        $this->assertInstanceOf('Content_Model_FieldSet_Interface', $result);

        $this->assertEquals($object->id, $result->id);
        $this->assertEquals(2, $result->section);
        $this->assertEquals('testTitle2', $result->title);
        $this->assertEquals(false, $result->visible);
    }
    
    public function testUpdateFromArray() {

        //setup
        $object = $this->createValidObject();

        $array = $object->toArray();
        
        //update values
        $array['section'] = 2;
        $array['title'] = 'testTitle2';
        $array['visible'] = false;

        $result = $this->service->update($array);

        $this->assertInstanceOf('Content_Model_FieldSet_Interface', $result);

        $this->assertEquals($object->id, $result->id);
        $this->assertEquals(2, $result->section);
        $this->assertEquals('testTitle2', $result->title);
        $this->assertEquals(false, $result->visible);
    }
    

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }

    public function testDeleteObject() {

        //setup
        $fieldSet = $this->createValidObject();

        //test delete
        $this->service->delete($fieldSet);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($fieldSet->id);
    }

    public function testDeleteId() {

        //setup
        $fieldSet = $this->createValidObject();
       // $this->fail("id: ".$fieldSet->id);
        $this->service->delete((int)$fieldSet->id);
        
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($fieldSet->id); 
    }
    
    public function testDeleteArray() {

        //setup
        $object = $this->createValidObject();
       // $this->fail("id: ".$fieldSet->id);
        $this->service->delete($object->toArray());
        
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id); 
    }
    
  public function testDeleteBySection() {

        //setup
        $object = $this->createValidObject();

        //test delete
        $this->service->deleteBySection($object->section);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDeleteException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }

    public function testDeleteAll() {
//        $this->service->deleteAll();
    }

}