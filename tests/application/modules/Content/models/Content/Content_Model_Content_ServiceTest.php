<?php

//require_once dirname(__FILE__) . '/../../../../../../application/modules/Content/models/Section/Content/Service.php';

/**
 * Test class for Content_Model_Content_Service.
 * Generated by PHPUnit on 2011-06-22 at 08:15:15.
 */
class Content_Model_Content_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Content_Model_Content_Service
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Content_Model_Content_Service;

        Zend_Loader::loadClass('Content_Installer');
        $installer = new Content_Installer();
        $installer->installTest();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        // $this->object->deleteAll();
        // Zend_Loader::loadClass('Content_Installer');
        $installer = new Content_Installer();
        $installer->uninstallTest();
        
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Content_Model_Content_MapperInterface', $this->object->getMapper());
    }

    /**
     * @todo Implement testSetMapper().
     */
    public function testSetMapper() {

        $mapper = new Content_Model_Content_MapperDbTable();
        $this->object->setMapper($mapper);

        $this->assertInstanceOf('Content_Model_Content_MapperInterface', $this->object->getMapper());
        $this->assertEquals($mapper, $this->object->getMapper());
        //$this->ass
    }

    private function createValidObject() {
        $content = new Content_Model_Content();

        //$content->id = 1;
        // $content->revision = 2;
        $content->section = Content_Installer::$testSection;
        $content->url = 'test-url';
        $content->visible = true;

        // $content->date = date('Y-m-d H:i:s', strtotime('+1 week'));
        // $content->expires = date('Y-m-d H:i:s', strtotime('+2 week'));
//        $content->author = 5;
//        $content->editor = 6;
        $content->owner = 5;
        $content->title = 'testTitle';
        $content->autosave = true;

        // $content->status = 4;
//        $content->content = array('body' => 'value');

        $result = $this->object->create($content);

        $this->assertInstanceOf('Content_Model_Content_Interface', $result);
        return $result;
    }

//    public function testCreateInvalidContent() {
//
//        $content = new Content_Model_Content();
//        // $content->revision = 2;
//
//        $content->section = Content_Installer::$testSection;
//        // $content->url = 'test-url'; //it's reqiured
//        $content->visible = true;
//
//        //  $content->date = null ;
//        //  $content->expires = date('Y-m-d H:i:s', strtotime('+1 week'));
//        //  $content->author = 5;
//        // $content->editor = 6;
//
//        $content->owner = 5;
//        $content->autosave = true;
//        $content->title = 'testTitle5';
//        
//        // $content->status = 4;
//        // $content->content = array('body' => 'value');
//        $this->setExpectedException('Exception');
//        
//        $result = $this->object->create($content);
//    }

//    
//    public function testDuplicateUrl() {
//
//        $content1 = $this->createValidContent();
//        $this->setExpectedException('DuplicateEntryException');
//        $content2 = $this->createValidContent();
//    }

    public function testCreateValidFromObject() {

        $result = $this->createValidObject();

        $this->assertNotNull($result->id);
        $this->assertEquals(Content_Installer::$testSection, $result->section);
        $this->assertEquals('test-url', (string) $result->url);
        $this->assertEquals(true, (bool) $result->visible);
        $this->assertNotNull($result->active_revision);
        $this->assertEquals($result->revision, $result->active_revision);
        
//        $this->assertNotNull($result->date);
//        $this->assertNotNull($result->expires);
//        $this->assertEquals(5, $result->author);
//        $this->assertEquals(6, $result->editor);

        $this->assertNotNull($result->revision);
        $this->assertEquals(5, $result->owner);
        $this->assertEquals(true, (bool) $result->autosave);

        $this->assertEquals('testTitle', (string) $result->title);

//        $this->assertEquals(4, $result->status);
//        $this->assertArrayHasKey('body', (string) $result->content);
//        $this->assertEquals('value', (string) $result->content['body']);
    }

//     public function testToArray() {
//
//        $content = new Content_Model_Content();
//        
//        $content->status = 0;
//        $content->primary_group = 1;
//        $content->username = 'testContentname';
//        $content->name = 'testName';
//        $content->location = 'testLocation';
//        $content->email = 'test@test.com';
//        $content->permissions = null;
//        $content->settings = array('test' => 'value');
//
//        $array = $content->toArray();
//        
//        $this->assertArrayHasKey('primary_group', (string) $array);
//        $this->assertEquals(1, $array['primary_group']);
//    }

    public function testCreateFromArray() {

        $content = array(
//            'id' => 1,
//            'revision' => 2,
            'url' => 'test-url',
            'section' => Content_Installer::$testSection,
            'visible' => true,
 
            'owner' => 5,
            'autosave' => true,
            
            'title' => 'testTitle',
            
//            'status' => 4,
//            'created' => null,
//            'expires' => null,
//            'author' => 5,
//            'editor' => 6,
//            'content' => array('body' => 'value')
        );



        $result = $this->object->create($content);

        $this->assertInstanceOf('Content_Model_Content_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(Content_Installer::$testSection, $result->section);
        $this->assertEquals('test-url', (string) $result->url);
        $this->assertEquals(true, (bool) $result->visible);
        $this->assertEquals($result->active_revision, $result->revision);
        
        $this->assertNotNull($result->revision);
        $this->assertEquals(5, $result->owner);
        $this->assertEquals(true, (bool) $result->autosave);
        
        $this->assertEquals('testTitle', (string) $result->title);
        
//        $this->assertEquals(4, $result->status);
//        $this->assertNotNull($result->date);
//        $this->assertNotNull($result->expires);
//        $this->assertEquals(5, $result->author);
//        $this->assertEquals(6, $result->editor);
//        $this->assertArrayHasKey('body', (string) $result->content);
        
//        $this->assertEquals('value', (string) $result->content['body']);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->create($badObject);
    }

    public function testGetObjectById() {

        //setup
        $content = $this->createValidObject();

        //test getObject
        $result = $this->object->getObjectByIdRevision($content->id, $content->revision);

        $this->assertInstanceOf('Content_Model_Content_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(Content_Installer::$testSection, $result->section);
        $this->assertEquals('test-url', (string) $result->url);
        $this->assertEquals(true, (bool) $result->visible);
        $this->assertEquals($result->active_revision, $result->revision);
        
        $this->assertNotNull($result->revision);
        $this->assertEquals(5, $result->owner);
        $this->assertEquals(true, (bool) $result->autosave);
        
        $this->assertEquals('testTitle', (string) $result->title);
        
//        $this->assertEquals(4, $result->status);
//        $this->assertNotNull($result->date);
//        $this->assertNotNull($result->expires);
//        $this->assertEquals(5, $result->author);
//        $this->assertEquals(6, $result->editor);
//        $this->assertArrayHasKey('body', (string) $result->content);
        
//        $this->assertEquals('value', (string) $result->content['body']);
    }

    public function testGetObjectByUrl() {

        //setup
        $content = $this->createValidObject();

        //test getObject
        $result = $this->object->getObjectByUrl($content->url);
        
        $this->assertInstanceOf('Content_Model_Content_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(Content_Installer::$testSection, $result->section);
        $this->assertEquals('test-url', (string) $result->url);
        $this->assertEquals(true, (bool) $result->visible);
        $this->assertEquals($result->active_revision, $result->revision);
        
        $this->assertNotNull($result->revision);
        $this->assertEquals(5, $result->owner);
        $this->assertEquals(true, (bool) $result->autosave);
        
        $this->assertEquals('testTitle', (string) $result->title);
        
//        $this->assertEquals(4, $result->status);
//        $this->assertNotNull($result->date);
//        $this->assertNotNull($result->expires);
//        $this->assertEquals(5, $result->author);
//        $this->assertEquals(6, $result->editor);
//        $this->assertArrayHasKey('body', (string) $result->content);
        
//        $this->assertEquals('value', (string) $result->content['body']);
    }
//    
//     public function testGetInvalidObjectByUrl() {
//
//        $this->setExpectedException('NotFoundException');
//        $result = $this->object->getObjectByUrl("testnotindatabase");
//
//    }

    public function testUpdateFromObject() {

        //setup
        $content = $this->createValidObject();
sleep(1);
        //update values
       // $content->section = 4;
        $content->url = 'test-url2';
        $content->visible = false;

        $content->owner = 6;
        $content->autosave = false;
        
        $content->title = 'testTitle2';
        
//        $content->date = new Zend_Date(strtotime('+1 week')) ;
//        $content->expires = new Zend_Date(strtotime('+2 week'));
//        $content->author = 6;
//        $content->editor = 7;
//        $content->status = 5;
//        $content->content = array('body' => 'value2');

        $result = $this->object->update($content);

        $this->assertInstanceOf('Content_Model_Content_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(Content_Installer::$testSection, $result->section);
        $this->assertEquals('test-url2', (string) $result->url);
        $this->assertEquals(false, (bool) $result->visible);
        $this->assertNotNull($result->active_revision);
        
        $this->assertNotNull($result->revision);
        $this->assertEquals(6, $result->owner);
        $this->assertEquals(false, (bool) $result->autosave);
        
        $this->assertEquals('testTitle2', (string) $result->title);
        
//        $this->assertEquals(5, $result->status);
//        $this->assertNotNull($result->date);
//        $this->assertEquals(7, $result->editor);
//        $this->assertNotNull($result->expires);       
//        $this->assertArrayHasKey('body', (string) $result->content);
//        $this->assertEquals('value2', (string) $result->content['body']);
    }

    public function testUpdateFromArray() {

        //setup
        $content = $this->createValidObject();
sleep(1);
        $array = $content->toArray();

        //update values          
        $array['url'] = 'test-url2';
        $array['visible'] = false;
        
        $array['owner'] = 6;
        $array['autosave'] = false;
        
        $array['title'] = 'testTitle2';
        
//        $array['status'] = 5;
//        $array['editor'] = 7;
//        $array['created'] = new Zend_Date(strtotime('+1 week')) ;
//        $array['expires'] = new Zend_Date(strtotime('+2 week'));
//        $array['content'] = array('body' => 'value2');


        $result = $this->object->update($array);

        $this->assertInstanceOf('Content_Model_Content_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(Content_Installer::$testSection, $result->section);
        $this->assertEquals('test-url2', (string) $result->url);
//        $this->assertNotEquals($result->active_revision, $result->revision);

        $this->assertNotNull($result->revision);
        $this->assertEquals(6, $result->owner);
        $this->assertEquals(false, (bool) $result->autosave);
        $this->assertEquals('testTitle2', (string) $result->title);
        
//        $this->assertEquals(5, $result->status);
//        $this->assertEquals(7, $result->editor);
//        $this->assertNotNull($result->date);
//        $this->assertNotNull($result->expires);
//        $this->assertArrayHasKey('body', (string) $result->content);
//        $this->assertEquals('value2', (string) $result->content['body']);
    }

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->update($badObject);
    }

    public function testDeleteObject() {

        //setup
        $content = $this->createValidObject();

        //test delete
        $this->object->delete($content);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectByIdRevision($content->id, $content->revision);
    }

    public function testDeleteBySection() {

        //setup
        $content = $this->createValidObject();

        //test delete
        $this->object->deleteBySection($content->section);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectByIdRevision($content->id, $content->revision);
    }

//    public function testDeleteId() {
//
//        //setup
//        $content = $this->createValidContent();
//       // $this->fail("id: ".$content->id);
//        $this->object->delete((int)$content->id);
//        
//        $this->setExpectedException('NotFoundException');
//        $result = $this->object->getObjectByIdRevision($content->id,$content->revision); 
//    }

    public function testDeleteArray() {

        //setup
        $content = $this->createValidObject();
        // $this->fail("id: ".$content->id);
        $this->object->delete($content->toArray());

        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectByIdRevision($content->id, $content->revision);
//        $this->fail(debugArray($result));
    }

    public function testDeleteException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->delete($badObject);
    }

    public function testDeleteAll() {
//        $this->object->deleteAll();
    }

    ////test custom columns

    public function testAddCustomTable() {
        //$this->markTestIncomplete();
        $section = 5;
        $this->object->addCustomTable($section);
    }

    public function testAddCustomField() {

        $field = new Content_Model_Field();
        $field->section = 5;
        $field->element = 'Text';
        $field->name = 'testName';


        $this->object->addCustomField($field);


//        $field = new Content_Model_Field();
//        $field->section = 5;
//        $field->element = 'Textarea';
//        $field->name = 'textarea';
//        $this->object->addCustomField($field);
    }

    public function testRemoveCustomField() {

        $field = new Content_Model_Field();
        $field->section = 5;
        $field->element = 'Text';
        $field->name = 'testName';

        $this->object->removeCustomField($field);
    }

    public function testRemoveCustomTable() {
        $section = 5;
        $this->object->removeCustomTable($section);
    }

}