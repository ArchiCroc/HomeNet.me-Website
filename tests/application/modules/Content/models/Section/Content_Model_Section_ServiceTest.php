<?php

/**
 * Test class for Content_Model_Section_Service.
 * Generated by PHPUnit on 2011-06-22 at 08:13:54.
 */
class Content_Model_Section_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Content_Model_Category_Service
     */
    protected $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->service = new Content_Model_Section_Service();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
      $this->service->deleteAll();
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Content_Model_Section_MapperInterface', $this->service->getMapper());
    }

    /**
     * @todo Implement testSetMapper().
     */
    public function testSetMapper() {
        
        $mapper = new Content_Model_Section_MapperDbTable();
         $this->service->setMapper($mapper);
        
        $this->assertInstanceOf('Content_Model_Section_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
        //$this->ass
    }

    private function createValidObject() {
        $section = new Content_Model_Section();
        $section->package = 'test';
        $section->title = 'testTitle';
        $section->url = 'testUrl';
        $section->description = null;
        $section->visible = true;
        $result = $this->service->create($section);

        $this->assertInstanceOf('Content_Model_Section_Interface', $result);
        return $result;
    }
    
    public function testCreateNullPackageSection() {
        $section = new Content_Model_Section();
        $section->package = null;
        $section->title = 'testTitle';
        $section->url = 'testUrl';
        $section->description = null;
        $section->visible = true;
        $result = $this->service->create($section);
        $this->assertInstanceOf('Content_Model_Section_Interface', $result);
    }
    
    public function testCreateInvalidSection() {
       $section = new Content_Model_Section();
        //$section->package = 'test';
        
       // $section->title = 'testTitle';
        $section->url = 'testUrl';
        $section->description = null;
        $section->visible = true;
        $this->setExpectedException('Exception');
        $result = $this->service->create($section);
    } 
    
    public function testDuplicateUrl() {

        $category1 = $this->createValidObject();
        $this->setExpectedException('DuplicateEntryException');
        $category2 = $this->createValidObject();
    }
    
    public function testCreateValidFromObject() {

        $result = $this->createValidObject();

        $this->assertNotNull($result->id);
        $this->assertEquals('test', $result->package);
        $this->assertEquals('testTitle', $result->title);
        $this->assertEquals('testUrl', $result->url);
        $this->assertEquals(null, $result->description);
        $this->assertEquals(true, $result->visible);
        
    }
    
    public function testCreateFromArray() {
   
        $section = array(
        'package' => 'test',
        'title' => 'testTitle',
        'url' => 'testUrl',
        'description' => null,
        'visible' => true);

        $result = $this->service->create($section);

        $this->assertInstanceOf('Content_Model_Section_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals('test', $result->package);
        $this->assertEquals('testTitle', $result->title);
        $this->assertEquals('testUrl', $result->url);
        $this->assertEquals(null, $result->description);
        $this->assertEquals(true, $result->visible);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->create($badObject);
    }

    public function testGetObjectById() {

        //setup
        $section = $this->createValidObject();

        //test getObject
        $result = $this->service->getObjectById($section->id);
        
        $this->assertInstanceOf('Content_Model_Section_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals('test', $result->package);
        $this->assertEquals('testTitle', $result->title);
        $this->assertEquals('testUrl', $result->url);
        $this->assertEquals(null, $result->description);
        $this->assertEquals(true, $result->visible);
    }

    public function testUpdateFromObject() {

        //setup
        $section = $this->createValidObject();
        $this->assertInstanceOf('Content_Model_Section_Interface', $section);

        //update values
       $section->package = null;
       $section->title = 'testTitle2';
       $section->url = 'testUrl2';
      $section->description = 'testDescription2';
      $section->visible = false;

        $result = $this->service->update($section);

        $this->assertInstanceOf('Content_Model_Section_Interface', $result);

        $this->assertEquals($section->id, $result->id);
        $this->assertEquals(null, $result->package);
        $this->assertEquals('testTitle2', $result->title);
        $this->assertEquals('testUrl2', $result->url);
        $this->assertEquals('testDescription2', $result->description);
        $this->assertEquals(false, $result->visible);
    }
    
    public function testUpdateFromArray() {

        //setup
        $section = $this->createValidObject();

        $array = $section->toArray();
        
        //update values
        $array['package'] = null;
        $array['title'] = 'testTitle2';
        $array['url'] = 'testUrl2';
        $array['description'] = 'testDescription2';
        $array['visible'] = false;
        
        $result = $this->service->update($array);

        $this->assertInstanceOf('Content_Model_Section_Interface', $result);

        $this->assertEquals($section->id, $result->id);
        $this->assertEquals(null, $result->package);
        $this->assertEquals('testTitle2', $result->title);
        $this->assertEquals('testUrl2', $result->url);
        $this->assertEquals('testDescription2', $result->description);
        $this->assertEquals(false, $result->visible);
    }
    

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }

    public function testDeleteObject() {

        //setup
        $section = $this->createValidObject();

        //test delete
        $this->service->delete($section);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($section->id);
    }

    public function testDeleteId() {

        //setup
        $section = $this->createValidObject();
       // $this->fail("id: ".$section->id);
        $this->service->delete((int)$section->id);
        
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($section->id); 
    }
    
    public function testDeleteArray() {

        //setup
        $section = $this->createValidObject();
       // $this->fail("id: ".$section->id);
        $this->service->delete($section->toArray());
        
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($section->id); 
    }

    public function testDeleteException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }

    public function testDeleteAll() {
//        $this->service->deleteAll();
    }

}

?>
