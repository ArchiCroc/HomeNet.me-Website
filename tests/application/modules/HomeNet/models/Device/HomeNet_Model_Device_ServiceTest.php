<?php

/**
 * Test class for HomeNet_Model_Device_Service.
 * Generated by PHPUnit on 2011-11-21 at 16:34:19.
 */
class HomeNet_Model_Device_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var HomeNet_Model_Device_Service
     */
    protected $service;
    protected $homenetInstaller;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
        $installer = new Core_Installer();
        $installer->installTest(array('house', 'room', 'node'));

        $this->homenetInstaller = new HomeNet_Installer();
        $this->homenetInstaller->installTest(array('house', 'room', 'node'));
        
        $this->service = new HomeNet_Model_Device_Service($this->homenetInstaller->house->id);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    private function _fillObject($object, $seed = 0) {
        $data = $this->_getTestData($seed);
        foreach ($data as $key => $value) {
            $object->$key = $value;
        }
        return $object;
    }

    private function _fillArray($array, $seed = 0) {
        if (is_object($array)) {
            $array = $array->toArray();
        }

        return array_merge($array, $this->_getTestData($seed));
    }

    private function _getTestData($seed = 0) {

//          //create node model
//        $array = array('type' => HomeNet_Model_Node::SENSOR,
//            'status' => HomeNet_Model_ComponentModel::LIVE,
//            'plugin' => 'Jeenode',
//            'name' => 'testModel',
//            'description' => 'test description',
//            'image' => 'test.jpg',
//            'max_devices' => 4,
//            'settings' => array('key' => 'value'));
//        $service = new HomeNet_Model_NodeModel_Service;
//        $model = $service->create($array);
       


         $array = array(
            'status' => HomeNet_Model_Node::STATUS_LIVE,
            'house' => $this->homenetInstaller->house->id,
            'node' => 1 + $seed,
            'model' => $this->homenetInstaller->deviceModel->id,
            'position' => 3 + $seed,
            'components' => 4 + $seed,
            'fixed' => false,
            'settings' => array('key' => 'value' . $seed));
        
        if($seed % 2 == 0){
            $array['fixed'] = true;
        }
        
        return $array;
        
    }

    private function _createValidObject($seed = 0) {
        $object = new HomeNet_Model_Device();
        $object = $this->_fillObject($object, $seed);

        $result = $this->service->create($object);

        $this->assertInstanceOf('HomeNet_Model_Device_Interface', $result);
        return $result;
    }

    private function _validateResult($result, $seed = 0) {
        $this->assertInstanceOf('HomeNet_Model_Device_Interface', $result);
        $this->assertNotNull($result->id);
        $this->assertEquals($this->homenetInstaller->house->id, $result->house);
        $this->assertEquals(1 + $seed, $result->node);
        $this->assertEquals($this->homenetInstaller->deviceModel->id, $result->model);
        $this->assertEquals(3 + $seed, $result->position);
        $this->assertEquals(4 + $seed, $result->components);
        if($seed % 2 == 0){
            $this->assertEquals(true, $result->fixed);
        } else {
            $this->assertEquals(false, $result->fixed);
        }
        $this->assertTrue(is_array($result->settings));
        $this->assertEquals('value' . $seed, $result->settings['key']);
    }

//$this->service->getMapper()///////////////////////////////////////////////////
    public function testGetMapper() {
        $this->assertInstanceOf('HomeNet_Model_Device_MapperInterface', $this->service->getMapper());
    }

//$this->service->setMapper($mapper)////////////////////////////////////////////
    public function testSetMapper() {
        $mapper = new HomeNet_Model_Device_MapperDbTable();
        $this->service->setMapper($mapper);

        $this->assertInstanceOf('HomeNet_Model_Device_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
    }

//$this->service->getObjectById($id)////////////////////////////////////////////
    public function testGetObjectById_valid() {
        $object = $this->_createValidObject();

        $result = $this->service->getObjectById($object->id);

        $this->_validateResult($result);
    }

    public function testGetObjectById_invalid() {
        $this->setExpectedException('NotFoundException');
        $this->service->getObjectById(1000);
    }

    public function testGetObjectById_null() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectById(null);
    }

//$this->service->getObjectByNodePosition($node, $position)/////////////////////
    public function testGetObjectByNodePosition_valid() {
        $object = $this->_createValidObject();
        $result = $this->service->getObjectByNodePosition($object->node, $object->position);
        $this->_validateResult($result);
    }

    public function testGetObjectByNodePosition_invalidNode() {
        $this->setExpectedException('NotFoundException');
        $this->service->getObjectByNodePosition(1000, 1);
    }

    public function testGetObjectByNodePosition_invalidPosition() {
        $this->setExpectedException('NotFoundException');
        $this->service->getObjectByNodePosition($this->homenetInstaller->node->id, 1000);
    }

    public function testGetObjectByNodePosition_nullNode() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectByNodePosition(null, 1);
    }

    public function testGetObjectByNodePosition_nullPosition() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectByNodePosition($this->homenetInstaller->node->id, null);
    }

//$this->service->newObjectFromModel($id)///////////////////////////////////////
    public function testnewObjectFromModel_valid() {
        $result = $this->service->newObjectFromModel($this->homenetInstaller->deviceModel->id);
        $this->assertInstanceOf('HomeNet_Model_Device_Abstract', $result);
    }

    public function testnewObjectFromModel_invalid() {
        $this->setExpectedException('NotFoundException');
        $result = $this->service->newObjectFromModel(1000);
    }

    public function testnewObjectFromModel_null() {
        $this->setExpectedException('InvalidArgumentException');
        $result = $this->service->newObjectFromModel(null);
    }

//$this->service->getObjectsByNode($node)///////////////////////////////////////
    public function testGetObjectsByNode_valid() {
        $object = $this->_createValidObject();

        $results = $this->service->getObjectsByNode($object->node);

        $this->_validateResult(end($results));
    }

    public function testGetObjectsByNode_invalid() {
        $this->markTestIncomplete('Validation needs to be added');
        $this->setExpectedException('NotFoundException');
        $this->service->getObjectsByNode(1000);
    }

    public function testGetObjectsByNode_null() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByNode(null);
    }

//$this->service->getObjectByNodeaddressPosition($node,$nodeAddress,$position)
    public function testGetObjectByNodeaddressPosition_valid() {
        $object = $this->_createValidObject();

        $result = $this->service->getObjectByNodeaddressPosition($this->homenetInstaller->node->address, $object->position);

        $this->_validateResult($result);
    }

    public function testGetObjectByNodeaddressPosition_invalid() {
        $this->setExpectedException('NotFoundException');
        $this->service->getObjectByNodeaddressPosition(1000, 1);
    }

    public function testGetObjectByNodeaddressPosition_nullAddress() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectByNodeaddressPosition(null, 1);
    }

    public function testGetObjectByNodeaddressPosition_nullPosition() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectByNodeaddressPosition(1, null);
    }

//$this->service->getObjectByIdWithNode($id)////////////////////////////////////    
    public function testGetObjectByIdWithNode_valid() {
        $object = $this->_createValidObject();

        $result = $this->service->getObjectByIdWithNode($object->id);

        $this->_validateResult($result);
    }

    public function testGetObjectByIdWithNode_invalid() {
        $this->setExpectedException('NotFoundException');
        $this->service->getObjectByIdWithNode(1000);
    }

    public function testGetObjectByIdWithNode_null() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectByIdWithNode(null);
    }
    
//$this->service->trash($object)///////////////////////////////////
    public function testTrash(){
        $object = $this->_createValidObject();
        $result = $this->service->trash($object);
        $this->assertEquals(HomeNet_Model_Device::STATUS_TRASHED, $result->status);
    }
    
//$this->service->untrash($object)//////////////////////////////////////
    public function testUntrash(){
        $object = $this->_createValidObject();
        $object->status = HomeNet_Model_Device::STATUS_TRASHED;
        $result = $this->service->untrash($object);
        $this->assertEquals(HomeNet_Model_Device::STATUS_LIVE, $result->status);
        
    }    

//$this->service->create($mixed)////////////////////////////////////////////////
    public function testCreate_validObject() {
        $result = $this->_createValidObject();

        $this->assertNotNull($result->id);
        $this->_validateResult($result);
    }

    public function testCreate_validArray() {
        $array = $this->_getTestData();

        $result = $this->service->create($array);
        $this->_validateResult($result);
    }

    public function testCreate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $this->service->create($badObject);
    }

//$this->service->update($mixed)////////////////////////////////////////////////
    public function testUpdate_validObject() {
        //setup
        $object = $this->_createValidObject();

        //update values
        $object = $this->_fillObject($object, 1);

        $result = $this->service->update($object);

        $this->_validateResult($result, 1);
    }

    public function testUpdate_validArray() {
        //setup
        $object = $this->_createValidObject();
        $array = $object->toArray();

        //update values
        $array = $this->_fillArray($array, 1);

        $result = $this->service->update($array);

        $this->_validateResult($result, 1);
    }

    public function testUpdate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }

//$this->service->delete($mixed)////////////////////////////////////////////////
    public function testDelete_validObject() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $id = $object->id;
        $this->service->delete($object);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($id);
    }

    public function testDelete_validArray() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $id = $object->id;
        $this->service->delete($object->toArray());

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($id);
    }

    public function testDelete_validId() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $id = $object->id;
        $this->service->delete($object->id);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($id);
    }

    public function testDelete_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }

}