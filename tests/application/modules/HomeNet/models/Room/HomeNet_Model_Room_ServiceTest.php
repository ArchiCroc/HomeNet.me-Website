<?php

/**
 * Test class for HomeNet_Model_Room_Service.
 * Generated by PHPUnit on 2011-11-21 at 16:36:13.
 */
class HomeNet_Model_Room_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var HomeNet_Model_Room_Service
     */
    protected $service;
    protected $homenetInstaller;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->homenetInstaller = new HomeNet_Installer();
        $this->homenetInstaller->installTest(array('house'));
        
        $this->service = new HomeNet_Model_Room_Service($this->homenetInstaller->house->id);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    
    private function _fillObject($object, $seed = 0) {
        $data = $this->_getTestData($seed);
        foreach ($data as $key => $value) {
            $object->$key = $value;
        }
        return $object;
    }

    private function _fillArray($array, $seed = 0) {
        if (is_object($array)) {
            $array = $array->toArray();
        }

        return array_merge($array, $this->_getTestData($seed));
    }

    private function _getTestData($seed = 0) {

         $array = array(
             'house' => $this->homenetInstaller->house->id,
           // 'status' => HomeNet_Model_Room::STATUS_LIVE,
            'region' => $seed+1,
            'name' => 'My Room'.$seed,
            'description' => 'My Description'.$seed);
        return $array;
        
    }

    private function _createValidObject($seed = 0) {
        $object = new HomeNet_Model_Room();
        $object = $this->_fillObject($object, $seed);

        $result = $this->service->create($object);

        $this->assertInstanceOf('HomeNet_Model_Room_Interface', $result);
        return $result;
    }

    private function _validateResult($result, $seed = 0) {
        $this->assertInstanceOf('HomeNet_Model_Room_Interface', $result);
        $this->assertNotNull($result->id);
        $this->assertEquals($this->homenetInstaller->house->id, $result->house);
        $this->assertEquals($seed+1, $result->region);
        $this->assertEquals('My Room'.$seed, $result->name);
        $this->assertEquals('My Description'.$seed, $result->description);
    }
    
//$this->service->getMapper()///////////////////////////////////////////////////
    public function testGetMapper() {
        $this->assertInstanceOf('HomeNet_Model_Room_MapperInterface', $this->service->getMapper());
    }

//$this->service->setMapper($mapper)////////////////////////////////////////////
    public function testSetMapper() {
        $mapper = new HomeNet_Model_Room_MapperDbTable();
        $this->service->setMapper($mapper);

        $this->assertInstanceOf('HomeNet_Model_Room_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
    }

//$this->service->getObjectById($id)////////////////////////////////////////////
    public function testGetObjectById_valid() {
        $object = $this->_createValidObject();

        $result = $this->service->getObjectById($object->id);

        $this->_validateResult($result);
    }

    public function testGetObjectById_invalid() {
        $this->setExpectedException('NotFoundException');
        $this->service->getObjectById(1000);
    }

    public function testGetObjectById_null() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectById(null);
    }
//$this->service->getObjects()///////////////////////////////////////////////////
    public function testGetObjects_valid() {
        $object = $this->_createValidObject();
        $results = $this->service->getObjects();

        $this->assertEquals(1, count($results));

        $this->_validateResult($results[0]);
    }



//    public function testGetObjectsByHouses_valid() {
//        $object = $this->_createValidObject();
//        $results = $this->service->getObjectsByHouses(array($this->homenetInstaller->house->id, $this->homenetInstaller->house2->id));
//
//        $this->assertEquals(1, count($results));
//
//        $this->_validateResult($results[0]);
//    }
//
//    public function testGetObjectsByHouses_invalid() {
//        $this->markTestIncomplete('More Validation required');
//        $this->setExpectedException('NotFoundException');
//        $this->service->getObjectsByHouses(array(1000, 1001));
//    }
//
//    public function testGetObjectsByHouses_wrongType() {
//        $this->markTestIncomplete('More Validation required');
//        $this->setExpectedException('InvalidArgumentException');
//        $this->service->getObjectsByHouses(array('wrongtype'));
//    }

//$this->service->getObjectsByRegion($region)///////////////////////////////////
    public function testGetObjectsByRegion_valid() {
        $object = $this->_createValidObject();
        $results = $this->service->getObjectsByRegion($object->region);

        $this->assertEquals(1, count($results));

        $this->_validateResult($results[0]);
    }

    public function testGetObjectsByRegion_invalid() {
        $this->markTestIncomplete();//@todo validiate that section really exists
       // $this->setExpectedException('NotFoundException');
       // $this->service->getObjectsByRegion('15');
    }

    
    public function testGetObjectsByRegion_null() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByRegion(null);
    }
    
//$this->service->create($mixed)////////////////////////////////////////////////
    public function testCreate_validObject() {
        $result = $this->_createValidObject();

        $this->assertNotNull($result->id);
        $this->_validateResult($result);
    }

    public function testCreate_validArray() {
        $array = $this->_getTestData();

        $result = $this->service->create($array);
        $this->_validateResult($result);
    }

    public function testCreate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $this->service->create($badObject);
    }

//$this->service->update($mixed)////////////////////////////////////////////////
    public function testUpdate_validObject() {
        //setup
        $object = $this->_createValidObject();

        //update values
        $object = $this->_fillObject($object, 1);

        $result = $this->service->update($object);

        $this->_validateResult($result, 1);
    }

    public function testUpdate_validArray() {
        //setup
        $object = $this->_createValidObject();
        $array = $object->toArray();

        //update values
        $array = $this->_fillArray($array, 1);

        $result = $this->service->update($array);

        $this->_validateResult($result, 1);
    }

    public function testUpdate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }
    
//$this->service->delete($mixed)////////////////////////////////////////////////
    public function testDelete_validObject() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $id = $object->id;
        $this->service->delete($object);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($id);
    }

    public function testDelete_validArray() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $id = $object->id;
        $this->service->delete($object->toArray());

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($id);
    }

    public function testDelete_validId() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $id = $object->id;
        $this->service->delete($object->id);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($id);
    }

    public function testDelete_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }

}