<?php

/**
 * Test class for HomeNet_Model_Network_Service.
 * Generated by PHPUnit on 2011-11-21 at 16:35:57.
 */
class HomeNet_Model_Network_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var HomeNet_Model_Network_Service
     */
    protected $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->service = new HomeNet_Model_Network_Service;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
      //  $this->service->deleteAll();
        $service = new HomeNet_Model_Network_Service;
        $service->deleteAll(); //prep db
    }
    
     private function _fillObject($object, $seed = 0) {
        $data = $this->_getTestData($seed);
        foreach ($data as $key => $value) {
            $object->$key = $value;
        }
        return $object;
    }
    private function _fillArray($array, $seed = 0) {
        if(is_object($array)){
            $array = $array->toArray();
        }
        
        return array_merge($array, $this->_getTestData($seed));
    }
    
    private function _getTestData($seed = 0) {
        
          //create Network model
         $array = array(
            'status' => HomeNet_Model_NetworkType::LIVE,
            'plugin' => 'Standalone',
            'name' => 'test name'.$seed,
            'description' => 'test description'.$seed,
            'settings' => array('key' => 'value'.$seed));
        $service = new HomeNet_Model_NetworkType_Service;
        $type = $service->create($array);

        return $array = array(
            'type' => $type->id,
            'house' => 4 + $seed,
            'settings' => array('key' => 'value' . $seed));
    }
    
    private function _createValidObject($seed = 0) {
        $object = new HomeNet_Model_Network();
        $object = $this->_fillObject($object, $seed);
  
        $result = $this->service->create($object);

        $this->assertInstanceOf('HomeNet_Model_Network_Interface', $result);
        return $result;
    }
    
    private function _validateResult($result, $seed = 0){
        
        $this->assertInstanceOf('HomeNet_Model_Network_Interface', $result);
        $this->assertNotNull($result->id);
        $this->assertNotNull($result->type);
        $this->assertEquals(4+$seed, $result->house);
        $this->assertTrue(is_array($result->settings));
        $this->assertEquals('value'.$seed, $result->settings['key']);
    }

    

//$this->service->getMapper()///////////////////////////////////////////////////    
    public function testGetMapper() {
       $this->assertInstanceOf('HomeNet_Model_Network_MapperInterface', $this->service->getMapper());
    }

//$this->service->setMapper($mapper)////////////////////////////////////////////
    public function testSetMapper() {
        $mapper = new HomeNet_Model_Network_MapperDbTable();
         $this->service->setMapper($mapper);
        
        $this->assertInstanceOf('HomeNet_Model_Network_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
    }
    
//$this->service->getObjectById($id)////////////////////////////////////////////
   public function testGetObjectById_valid() {
        $object = $this->_createValidObject();
        
        $result = $this->service->getObjectById($object->id);
        
        $this->_validateResult($result);
    }

    public function testGetObjectById_invalid() {
        $this->setExpectedException('NotFoundException');
        $this->service->getObjectById(1000);
    }

    public function testGetObjectById_null() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectById(null);
    }

//$this->service->getObjectByHouse($house)//////////////////////////////////////
    public function testGetObjectsByHouse_valid() {
        $object = $this->_createValidObject();
        
        $results = $this->service->getObjectsByHouse($object->house);

        $this->assertEquals(1, count($results));
        $this->_validateResult($results[0]);
    }
     public function testGetObjectsByHouse_null() {
        $this->setExpectedException('InvalidArgumentException');
        $results = $this->service->getObjectsByHouse(null);
    }

//$this->service->getObjectsByHouseType($house, $type)//////////////////////////
    public function testGetObjectByHouseType_valid() {
        $object = $this->_createValidObject();
        
        $results = $this->service->getObjectsByHouseType($object->house, $object->type);
        $this->assertEquals(1, count($results));
        $this->_validateResult($results[0]);
    }
    public function testGetObjectsByHouseType_houseNull() {
        $this->setExpectedException('InvalidArgumentException');
        $results = $this->service->getObjectsByHouseType(null, 1);
    }
     public function testGetObjectsByHouseType_statusNull() {
        $this->setExpectedException('InvalidArgumentException');
        $results = $this->service->getObjectsByHouseType(100, null);
    }
    
//$this->service->newObjectFromModel($model)////////////////////////////////////
    public function testNewObjectByType_valid() {
        $object = $this->_createValidObject();
        $result = $this->service->newObjectFromType($object->type);
        
        $this->assertInstanceOf('HomeNet_Model_Network_Abstract', $result);
    }
//    public function testNewObjectByModel_missingPlugin() {
//        $object = $this->_createValidObject();
//        $object->plugin = null;
//        $this->setExpectedException('InvalidArgumentException');
//        $result = $this->service->newObjectFromModel($object->model);
//
//    }
//    public function testNewObjectByModel_badPlugin() {
//        $this->setExpectedException('InvalidArgumentException');
//        $result = $this->service->newObjectFromModel(null);
//    }
    

//$this->service->create($mixed)////////////////////////////////////////////////
    public function testCreate_validObject() {
        $result = $this->_createValidObject();

        $this->_validateResult($result);
    }

    public function testCreate_validArray() {
        $array = $this->_getTestData();
        
        $result = $this->service->create($array);

        $this->_validateResult($result);
    }

    public function testCreate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $this->service->create($badObject);
    }
    
//$this->service->update($mixed)////////////////////////////////////////////////
    public function testUpdate_validObject() {
        //setup
        $object = $this->_createValidObject();

        //update values
        $object = $this->_fillObject($object, 1);

        $result = $this->service->update($object);

        $this->_validateResult($result, 1);
    }

    public function testUpdate_validArray() {
        //setup
        $object = $this->_createValidObject();
        $array = $object->toArray();

        //update values
        $array = $this->_fillArray($array, 1);

        $result = $this->service->update($array);

        $this->_validateResult($result, 1);
    }

    public function testUpdate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }

//$this->service->delete($mixed)////////////////////////////////////////////////    
    public function testDelete_validObject() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $this->service->delete($object);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDelete_validArray() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $this->service->delete($object->toArray());

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDelete_validId() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $this->service->delete($object->id);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDelete_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }
}