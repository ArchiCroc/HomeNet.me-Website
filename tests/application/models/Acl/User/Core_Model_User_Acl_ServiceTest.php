<?php

//require_once dirname(__FILE__) . '/../../../../../application/models/User/Acl/Service.php';

/**
 * Test class for Core_Model_Acl_User_Acl_Service.
 * Generated by PHPUnit on 2011-06-22 at 08:07:56.
 */
class Core_Model_Acl_User_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Core_Model_Acl_User_Service
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Core_Model_Acl_User_Service();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->object->deleteAll();
    //    $this->createTestUserAcls();
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Core_Model_Acl_User_MapperInterface', $this->object->getMapper());
    }

    public function testSetMapper() {

        $mapper = new Core_Model_Acl_User_MapperDbTable();
        $this->object->setMapper($mapper);

        $this->assertInstanceOf('Core_Model_Acl_User_MapperInterface', $this->object->getMapper());
        $this->assertEquals($mapper, $this->object->getMapper());
        //$this->ass
    }

    private function createValidUserAcl() {
        $userAcl = new Core_Model_Acl_User();
        $userAcl->user = 1;
        $userAcl->module = 'core';
        $userAcl->controller = 'index';
        $userAcl->action = 'new';
        $userAcl->object = 2;
        $userAcl->permission = 1;

        $result = $this->object->create($userAcl);

        $this->assertInstanceOf('Core_Model_Acl_User_Interface', $result);
        return $result;
    }

    private function createTestUserAcls() {
        // $this->createValidUserAcl();
        $acls = array();

        for ($i = 1; $i <= 3; $i++) {

            $base = array(
                'user' => $i,
                'module' => null,
                'controller' => null,
                'action' => null,
                'object' => null,
                'permission' => 1);

            $acls[] = $base; //deny all
            //null values
            //deny all to demo 
            $base['module'] = 'demo';
            $acls[] = $base;

            //$base['permission'] = 1;
            //grant view to all demo items
            $acl = $base;
            $base['module'] = 'demo';
            $acl['action'] = 'view';
            $acls[] = $acl;
            
            $base['controller'] = 'test';

            //core
            $acl = $base;
            $acl['module'] = 'core';

            $acl['action'] = 'new';
            $acls[] = $acl;

            $acl['action'] = 'delete';
            $acls[] = $acl;

            //test
            $acl = $base;
            $acl['module'] = 'test';
            $acl['action'] = 'new';
            $acls[] = $acl;

            $acl['action'] = 'edit';
            $acls[] = $acl;

            $acl['action'] = 'delete';
            $acls[] = $acl;

            //specfic objects
            $acl['action'] = 'view';
            $acl['object'] = 1;
            $acls[] = $acl;

            $acl['object'] = 2;
            $acls[] = $acl;

            $acl['object'] = 3;
            $acls[] = $acl;
        }
        foreach ($acls as $acl) {
            $this->object->create($acl);
        }
    }

    public function testCreateInvalidUserAcl() {
        $userAcl = new Core_Model_Acl_User();
        $userAcl->user = 1;
        $userAcl->module = null;
        $userAcl->controller = 'index';
        $userAcl->action = 'new';
        //$userAcl->permission = 1;
        $this->setExpectedException('Exception');
        $result = $this->object->create($userAcl);
    }

//    
//    public function testDuplicateUrl() {
//
//        $userAcl1 = $this->createValidUserAcl();
//        $this->setExpectedException('DuplicateEntryException');
//        $userAcl2 = $this->createValidUserAcl();
//    }

    public function testGetObjectsByUser() {

        $this->createTestUserAcls();
        $result = $this->object->getObjectsByUser(2);
    
        $this->assertEquals(8, count($result));

        foreach ($result as $acl) {
            $this->assertNotNull($acl->id);
            $this->assertEquals(2, $acl->user);
            $this->assertEquals(null, $acl->object);
            $this->assertEquals(1, $acl->permission);
        }
    }

    public function testGetObjectsByUserModule() {
        $this->createTestUserAcls();
        $result = $this->object->getObjectsByUserModule(2, 'core');
 //echo debugArray($result->toArray());
        $this->assertEquals(3, count($result)); //verify
        foreach ($result as $acl) {
            $this->assertNotNull($acl->id);
            $this->assertEquals(2, $acl->user);
            $this->assertTrue(in_array($acl->module, array('core',null)));
            $this->assertEquals(null, $acl->object);
            $this->assertEquals(1, $acl->permission);
        }
    }

    public function testGetObjectsByUserModuleControllerObject() {
        $this->createTestUserAcls();
        $result = $this->object->getObjectsByUserModuleControllerObject(2, 'test', 'test', 1);
  //   echo debugArray($result->toArray());
        $this->assertEquals(5, count($result));

        foreach ($result as $acl) {

            $this->assertNotNull($acl->id);
            $this->assertEquals(2, $acl->user);
            $this->assertTrue(in_array($acl->module, array('test',null)));
            $this->assertTrue(in_array($acl->controller, array('test',null)));
            $this->assertTrue(in_array($acl->object, array(1,null)));
            $this->assertEquals(1, $acl->permission);
        }
    }

    public function testGetObjectsByUserModuleControllerObjects() {
        $this->createTestUserAcls();
        $result = $this->object->getObjectsByUserModuleControllerObjects(2, 'test', 'test', array(1, 2));
        
        $this->assertEquals(6, count($result));

        foreach ($result as $acl) {

            $this->assertNotNull($acl->id);
            $this->assertEquals(2, $acl->user);
            $this->assertTrue(in_array($acl->module, array('test',null)));
            $this->assertTrue(in_array($acl->controller, array('test',null)));
            $this->assertTrue(in_array($acl->object, array(1, 2, null)));
            $this->assertEquals(1, $acl->permission);
        }
    }

    public function testCreateValidFromObject() {

        $result = $this->createValidUserAcl();

        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->user);
        $this->assertEquals('core', $result->module);
        $this->assertEquals('index', $result->controller);
        $this->assertEquals('new', $result->action);
        $this->assertEquals(2, $result->object);
        $this->assertEquals(1, $result->permission);
    }

    public function testCreateFromArray() {

        $userAcl = array(
            'user' => 1,
            'module' => 'homenet',
            'controller' => 'test',
            'action' => 'edit',
            'object' => 2,
            'permission' => 0);

        $result = $this->object->create($userAcl);

        $this->assertInstanceOf('Core_Model_Acl_User_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->user);
        $this->assertEquals('homenet', $result->module);
        $this->assertEquals('test', $result->controller);
        $this->assertEquals('edit', $result->action);
        $this->assertEquals(2, $result->object);
        $this->assertEquals(0, $result->permission);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->create($badObject);
    }

    public function testGetObjectById() {

        //setup
        $userAcl = $this->createValidUserAcl();

        //test getObject
        $result = $this->object->getObjectById($userAcl->id);

        $this->assertInstanceOf('Core_Model_Acl_User_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->user);
        $this->assertEquals('core', $result->module);
        $this->assertEquals('index', $result->controller);
        $this->assertEquals('new', $result->action);
        $this->assertEquals(2, $result->object);
        $this->assertEquals(1, $result->permission);
    }

//    public function testGetObjectByUrl() {
//
//        //setup
//        $userAcl = $this->createValidUserAcl();
//
//        //test getObject
//        $result = $this->object->getObjectByUrl($userAcl->url);
//        
//        $this->assertInstanceOf('Core_Model_Acl_User_Interface', $result);
//
//        $this->assertEquals($userAcl->id, $result->id);
//        $this->assertEquals(0, $result->set);
//        $this->assertEquals(1, $result->parent);
//        $this->assertEquals(2, $result->order);
//        $this->assertEquals('testUrl', $result->url);
//        $this->assertEquals('testTitle', $result->title);
//        $this->assertEquals('testDescription', $result->description);
//    }
//    
//     public function testGetInvalidObjectByUrl() {
//
//        $this->setExpectedException('NotFoundException');
//        $result = $this->object->getObjectByUrl("testnotindatabase");
//
//    }

    public function testUpdateFromObject() {

        //setup
        $userAcl = $this->createValidUserAcl();

        //update values
        $userAcl->user = 2;
        $userAcl->module = 'blog';
        $userAcl->controller = 'admin';
        $userAcl->action = 'view';
        $userAcl->object = 3;
        $userAcl->permission = 0;

        $result = $this->object->update($userAcl);

        $this->assertInstanceOf('Core_Model_Acl_User_Interface', $result);

        $this->assertEquals($userAcl->id, $result->id);
        $this->assertEquals(2, $result->user);
        $this->assertEquals('blog', $result->module);
        $this->assertEquals('admin', $result->controller);
        $this->assertEquals('view', $result->action);
        $this->assertEquals(3, $result->object);
        $this->assertEquals(0, $result->permission);
    }

    public function testUpdateFromArray() {

        //setup
        $userAcl = $this->createValidUserAcl();

        $array = $userAcl->toArray();

        //update values
        $array['user'] = 2;
        $array['module'] = 'blog';
        $array['controller'] = 'admin';
        $array['action'] = 'view';
        $array['object'] = 3;
        $array['permission'] = 0;


        $result = $this->object->update($array);

        $this->assertInstanceOf('Core_Model_Acl_User_Interface', $result);

        $this->assertEquals($userAcl->id, $result->id);
        $this->assertEquals(2, $result->user);
        $this->assertEquals('blog', $result->module);
        $this->assertEquals('admin', $result->controller);
        $this->assertEquals('view', $result->action);
        $this->assertEquals(3, $result->object);
        $this->assertEquals(0, $result->permission);
    }

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->update($badObject);
    }

    public function testDeleteObject() {

        //setup
        $userAcl = $this->createValidUserAcl();

        //test delete
        $this->object->delete($userAcl);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($userAcl->id);
    }

    public function testDeleteId() {

        //setup
        $userAcl = $this->createValidUserAcl();
        // $this->fail("id: ".$userAcl->id);
        $this->object->delete((int) $userAcl->id);

        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($userAcl->id);
    }

    public function testDeleteArray() {

        //setup
        $userAcl = $this->createValidUserAcl();
        // $this->fail("id: ".$userAcl->id);
        $this->object->delete($userAcl->toArray());

        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($userAcl->id);
    }

    public function testDeleteException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->delete($badObject);
    }

    public function testDeleteAll() {
//        $this->object->deleteAll();
    }

}