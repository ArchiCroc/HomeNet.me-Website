<?php

require_once dirname(__FILE__) . '/../../../../../application/models/Section/Content/Service.php';

/**
 * Test class for Core_Model_Content_Service.
 * Generated by PHPUnit on 2011-06-22 at 08:15:15.
 */
class Core_Model_Content_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Core_Model_Content_Service
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Core_Model_Content_Service;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
       $this->object->deleteAll();
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Core_Model_Content_MapperInterface', $this->object->getMapper());
    }

    /**
     * @todo Implement testSetMapper().
     */
    public function testSetMapper() {
        
        $mapper = new Core_Model_Content_MapperDbTable();
         $this->object->setMapper($mapper);
        
        $this->assertInstanceOf('Core_Model_Content_MapperInterface', $this->object->getMapper());
        $this->assertEquals($mapper, $this->object->getMapper());
        //$this->ass
    }

    private function createValidContent() {
        $content = new Core_Model_Content();
        
        $content->status = 0;
        $content->primary_group = 1;
        $content->username = 'testContentname';
        $content->name = 'testName';
        $content->location = 'testLocation';
        $content->email = 'test@test.com';
        $content->permissions = null;
        $content->settings = array('test' => 'value');
        
        $result = $this->object->create($content);

        $this->assertInstanceOf('Core_Model_Content_Interface', $result);
        return $result;
    }
    
    public function testCreateInvalidContent() {
        $content = new Core_Model_Content();
        $content->status = 0;
        $content->primary_group = 1;
       // $content->username = 'testContentname';
        $content->name = 'testName';
        $content->location = 'testLocation';
        $content->email = 'test@test.com';
        $content->permissions = "";
        $content->settings = array('test' => 'value');
        $this->setExpectedException('Exception');
        $result = $this->object->create($content);
    }
//    
//    public function testDuplicateUrl() {
//
//        $content1 = $this->createValidContent();
//        $this->setExpectedException('DuplicateEntryException');
//        $content2 = $this->createValidContent();
//    }

    public function testCreateValidFromObject() {

        $result = $this->createValidContent();

        $this->assertNotNull($result->id);
        $this->assertEquals(0, $result->status);
        $this->assertEquals(1, $result->primary_group);
        $this->assertEquals('testContentname', $result->username);
        $this->assertEquals('testName', $result->name);
        $this->assertEquals('testLocation', $result->location);
        $this->assertEquals('test@test.com', $result->email);
        $this->assertEquals(null, $result->permissions);
        $this->assertArrayHasKey('test', $result->settings);
    }
    
     public function testToArray() {

        $content = new Core_Model_Content();
        
        $content->status = 0;
        $content->primary_group = 1;
        $content->username = 'testContentname';
        $content->name = 'testName';
        $content->location = 'testLocation';
        $content->email = 'test@test.com';
        $content->permissions = null;
        $content->settings = array('test' => 'value');

        $array = $content->toArray();
        
        $this->assertArrayHasKey('primary_group', $array);
        $this->assertEquals(1, $array['primary_group']);
    }
    
    public function testCreateFromArray() {

        $content = array(
            'status' => 0,
            'primary_group' => 1,
            'username' => 'testContentname',
            'name' => 'testName',
            'location' => 'testLocation',
            'email' => 'test@test.com',
            'permissions' => null,
            'settings' => array('test' => 'value'));

        $result = $this->object->create($content);

        $this->assertInstanceOf('Core_Model_Content_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(0, $result->status);
        $this->assertEquals(1, $result->primary_group);
        $this->assertEquals('testContentname', $result->username);
        $this->assertEquals('testName', $result->name);
        $this->assertEquals('testLocation', $result->location);
        $this->assertEquals('test@test.com', $result->email);
        $this->assertEquals(null, $result->permissions);
        $this->assertArrayHasKey('test', $result->settings);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->create($badObject);
    }

    public function testGetObjectById() {

        //setup
        $content = $this->createValidContent();

        //test getObject
        $result = $this->object->getObjectById($content->id);
        
        $this->assertInstanceOf('Core_Model_Content_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(0, $result->status);
        $this->assertEquals(1, $result->primary_group);
        $this->assertEquals('testContentname', $result->username);
        $this->assertEquals('testName', $result->name);
        $this->assertEquals('testLocation', $result->location);
        $this->assertEquals('test@test.com', $result->email);
        $this->assertEquals(null, $result->permissions);
        $this->assertArrayHasKey('test', $result->settings);
    }
    
//    public function testGetObjectByUrl() {
//
//        //setup
//        $content = $this->createValidContent();
//
//        //test getObject
//        $result = $this->object->getObjectByUrl($content->url);
//        
//        $this->assertInstanceOf('Core_Model_Content_Interface', $result);
//
//        $this->assertEquals($content->id, $result->id);
//        $this->assertEquals(0, $result->set);
//        $this->assertEquals(1, $result->parent);
//        $this->assertEquals(2, $result->order);
//        $this->assertEquals('testUrl', $result->url);
//        $this->assertEquals('testTitle', $result->title);
//        $this->assertEquals('testDescription', $result->description);
//    }
//    
//     public function testGetInvalidObjectByUrl() {
//
//        $this->setExpectedException('NotFoundException');
//        $result = $this->object->getObjectByUrl("testnotindatabase");
//
//    }

    public function testUpdateFromObject() {

        //setup
        $content = $this->createValidContent();

        //update values
        $content->status = 1;
        $content->primary_group = 3;
        $content->username = 'testContentname2';
        $content->name = 'testName2';
        $content->location = 'testLocation2';
        $content->email = 'test2@test.com';
        $content->permissions = array();
        $content->settings = array('test2' => 'value');

        $result = $this->object->update($content);

        $this->assertInstanceOf('Core_Model_Content_Interface', $result);

        $this->assertEquals($content->id,$result->id);
        $this->assertEquals(1, $result->status);
        $this->assertEquals(3, $result->primary_group);
        $this->assertEquals('testContentname2', $result->username);
        $this->assertEquals('testName2', $result->name);
        $this->assertEquals('testLocation2', $result->location);
        $this->assertEquals('test2@test.com', $result->email);
        $this->assertEquals(array(), $result->permissions);
        $this->assertArrayHasKey('test2', $result->settings);
        $this->assertEquals('value', $result->getSetting('test2'));
    }
    
    public function testUpdateFromArray() {

        //setup
        $content = $this->createValidContent();

        $array = $content->toArray();
        
        //update values      
        $array['status'] = 1;
        $array['primary_group'] = 3;
        $array['username'] = 'testContentname2';
        $array['name'] = 'testName2';
        $array['location'] = 'testLocation2';
        $array['email'] = 'test2@test.com';
        $array['permissions'] = array();
        $array['settings'] = array('test2' => 'value');


        $result = $this->object->update($array);

        $this->assertInstanceOf('Core_Model_Content_Interface', $result);

        $this->assertEquals($content->id,$result->id);
        $this->assertEquals(1, $result->status);
        $this->assertEquals(3, $result->primary_group);
        $this->assertEquals('testContentname2', $result->username);
        $this->assertEquals('testName2', $result->name);
        $this->assertEquals('testLocation2', $result->location);
        $this->assertEquals('test2@test.com', $result->email);
        $this->assertEquals(array(), $result->permissions);
        $this->assertArrayHasKey('test2', $result->settings);
        $this->assertEquals('value', $result->getSetting('test2'));
    }
    

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->update($badObject);
    }

    public function testDeleteObject() {

        //setup
        $content = $this->createValidContent();

        //test delete
        $this->object->delete($content);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($content->id);
    }

    public function testDeleteId() {

        //setup
        $content = $this->createValidContent();
       // $this->fail("id: ".$content->id);
        $this->object->delete((int)$content->id);
        
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($content->id); 
    }
    
    public function testDeleteArray() {

        //setup
        $content = $this->createValidContent();
       // $this->fail("id: ".$content->id);
        $this->object->delete($content->toArray());
        
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($content->id); 
    }

    public function testDeleteException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->delete($badObject);
    }

    public function testDeleteAll() {
//        $this->object->deleteAll();
    }

}

?>
