<?php

/**
 * Test class for HomeNet_Model_Component_Service.
 * Generated by PHPUnit on 2011-11-21 at 16:36:18.
 */
class HomeNet_Model_Component_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var HomeNet_Model_Component_Service
     */
    protected $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->service = new HomeNet_Model_Component_Service;
    }

    protected function tearDown() {
        $this->service->deleteAll();
    }
    
    private function createValidObject() {
        
        $array = array('status' => HomeNet_Model_ComponentModel::LIVE,
        'plugin' => 'LED',
        'name' => 'testModel',
        'description' => 'test description',
        'units' => '"',
        'settings' => array('key' => 'value'));

        $service = new HomeNet_Model_ComponentModel_Service;
        $model = $service->create($array);
        
        $object = new HomeNet_Model_Component();
        $object->device = 1;
        $object->model = $model->id;
        $object->position = 3;
        $object->order = 4;
        $object->room = 5;
        $object->name = 'testName';
        $object->settings = array('key' => 'value');
  
        $result = $this->service->create($object);

        $this->assertInstanceOf('HomeNet_Model_Component_Interface', $result);
        return $result;
    }
    
    private function validateResult($result){
        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->device);
        //$this->assertEquals(2, $result->model);
        $this->assertEquals(3, $result->position);
        $this->assertEquals(4, $result->order);
        $this->assertEquals(5, $result->room);
        $this->assertEquals('testName', $result->name);
        $this->assertTrue(is_array($result->settings));
        $this->assertEquals('value', $result->settings['key']);
    }
    
//$this->service->getMapper()///////////////////////////////////////////////////
    public function testGetMapper() {
       $this->assertInstanceOf('HomeNet_Model_Component_MapperInterface', $this->service->getMapper());
    }
    
//$this->service->setMapper($mapper)////////////////////////////////////////////
    public function testSetMapper() {
        $mapper = new HomeNet_Model_Component_MapperDbTable();
         $this->service->setMapper($mapper);
        
        $this->assertInstanceOf('HomeNet_Model_Component_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
    }
    
//$this->service->getObjectById($id)////////////////////////////////////////////
    public function testGetObjectById_valid() {
        $object = $this->createValidObject();

        $result = $this->service->getObjectById($object->id);

        $this->validateResult($result);
    }

    public function testGetObjectById_invalid() {
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById(1000);
    }

    public function testGetObjectById_null() {
        $this->setExpectedException('InvalidArgumentException');
        $result = $this->service->getObjectById(null);
    }

    public function testGetObjectsByDevice_valid() {
       $object = $this->createValidObject();
       $results = $this->service->getObjectsByDevice($object->device);
       $this->assertEquals(1, count($results));
        $this->validateResult($results[0]);
    }
    
    public function testGetObjectsByDevice_invalid() {
      $this->markTestIncomplete('This test has not been implemented yet.');
    }
    
    public function testGetObjectsByDevice_null() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByDevice(null);
    }

    public function testGetObjectsByRoom_valid() {
        $object = $this->createValidObject();
         $results = $this->service->getObjectsByRoom($object->room);
         $this->assertEquals(1, count($results));
        $this->validateResult(reset($results));
    }
    public function testGetObjectsByRoom_invalid() {
        //$this->service->getObjectsByRoom(5);
        $this->markTestIncomplete('This test has not been implemented yet.');
    }
    public function testGetObjectsByRoom_null() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByRoom(null);
    }
    
//$this->service->create($mixed)////////////////////////////////////////////////
       public function testCreate_validObject() {
        $result = $this->createValidObject();

        $this->assertNotNull($result->id);
        $this->validateResult($result);
    }

    public function testCreate_validArray() {
        $array = array('device' => 1,
        'model' => 2,
        'position' => 3,
        'order' => 4,
        'room' => 5,
        'name' => 'testName',
        'settings' => array('key' => 'value'));

        $result = $this->service->create($array);
        $this->validateResult($result);
    }
    
//$this->service->update($mixed)////////////////////////////////////////////////
    public function testCreate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $this->service->create($badObject);
    }

    public function testUpdate_validObject() {
        //setup
        $object = $this->createValidObject();

        //update values
        $object->device = 2;
        $object->model = 3;
        $object->position = 4;
        $object->order = 5;
        $object->room = 6;
        $object->name = 'testName2';
        $object->settings = array('key' => 'value2');

        $result = $this->service->update($object);

        $this->assertInstanceOf('HomeNet_Model_Component_Interface', $result);

        $this->assertEquals($object->id, $result->id);
        $this->assertEquals(2, $result->device);
        $this->assertEquals(3, $result->model);
        $this->assertEquals(4, $result->position);
        $this->assertEquals(5, $result->order);
        $this->assertEquals(6, $result->room);
        $this->assertEquals('testName2', $result->name);
        $this->assertTrue(is_array($result->settings));
        $this->assertEquals('value2', $result->settings['key']);
    }

    public function testUpdate_validArray() {
        //setup
        $object = $this->createValidObject();
        $array = $object->toArray();

        //update values
        $array['device'] = 2;
        $array['model'] = 3;
        $array['position'] = 4;
        $array['order'] = 5;
        $array['room'] = 6;
        $array['name'] = 'testName2';
        $array['settings'] = array('key' => 'value2');

        $result = $this->service->update($array);

        $this->assertInstanceOf('HomeNet_Model_Component_Interface', $result);

        $this->assertEquals($object->id, $result->id);
        $this->assertEquals(2, $result->device);
        $this->assertEquals(3, $result->model);
        $this->assertEquals(4, $result->position);
        $this->assertEquals(5, $result->order);
        $this->assertEquals(6, $result->room);
        $this->assertEquals('testName2', $result->name);
        $this->assertTrue(is_array($result->settings));
        $this->assertEquals('value2', $result->settings['key']);
    }

    public function testUpdate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }

//$this->service->delete($mixed)////////////////////////////////////////////////
    public function testDelete_validObject() {
        //setup
        $object = $this->createValidObject();

        //test delete
        $this->service->delete($object);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDelete_validArray() {
        //setup
        $object = $this->createValidObject();

        //test delete
        $this->service->delete($object->toArray());

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDelete_validId() {
        //setup
        $object = $this->createValidObject();

        //test delete
        $this->service->delete($object->id);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDelete_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }
}