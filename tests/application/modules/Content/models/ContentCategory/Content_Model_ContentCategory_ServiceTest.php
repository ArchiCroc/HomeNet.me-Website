<?php

//require_once dirname(__FILE__) . '/../../../../application/modules/Content/models/Category/Service.php';

/**
 * Test class for Content_Model_ContentCategory_Service.
 * Generated by PHPUnit on 2011-06-20 at 22:28:48.
 */
class Content_Model_ContentCategory_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Content_Model_ContentCategory_Service
     */
    protected $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->service = new Content_Model_ContentCategory_Service;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->service->deleteAll();
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Content_Model_ContentCategory_MapperInterface', $this->service->getMapper());
    }

    /**
     * @todo Implement testSetMapper().
     */
    public function testSetMapper() {
        
        $mapper = new Content_Model_ContentCategory_MapperDbTable();
         $this->service->setMapper($mapper);
        
        $this->assertInstanceOf('Content_Model_ContentCategory_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
        //$this->ass
    }

    private function createValidObject() {
        $contentCategory = new Content_Model_ContentCategory();
        $contentCategory->section = 1;
        $contentCategory->content = 2;
        $contentCategory->category = 3;

        $result = $this->service->create($contentCategory);

        $this->assertInstanceOf('Content_Model_ContentCategory_Interface', $result);
        return $result;
    }
    
    public function testCreateInvalidCategory() {
        $contentCategory = new Content_Model_ContentCategory();
        $contentCategory->section = 1;
        //$contentCategory->content = 2;
        $contentCategory->category = 3;
        $this->setExpectedException('Exception');
        $result = $this->service->create($contentCategory);
    }
//    
//    public function testDuplicateUrl() {
//
//        $contentCategory1 = $this->createValidContentCategory();
//        $this->setExpectedException('DuplicateEntryException');
//        $contentCategory2 = $this->createValidContentCategory();
//    }

    public function testCreateValidFromObject() {

        $result = $this->createValidObject();     

        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->section);
        $this->assertEquals(2, $result->content);
        $this->assertEquals(3, $result->category);

    }
    
    public function testCreateFromArray() {

        $contentCategory = array(
        'section' => 1,
        'content' => 2,
        'category' => 3);
 
        $result = $this->service->create($contentCategory);

        $this->assertInstanceOf('Content_Model_ContentCategory_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->section);
        $this->assertEquals(2, $result->content);
        $this->assertEquals(3, $result->category);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->create($badObject);
    }

    public function testGetObjectById() {

        //setup
        $contentCategory = $this->createValidObject();

        //test getObject
        $result = $this->service->getObjectById($contentCategory->id);
        
        $this->assertInstanceOf('Content_Model_ContentCategory_Interface', $result);

        $this->assertEquals($contentCategory->id, $result->id);
        $this->assertEquals(1, $result->section);
        $this->assertEquals(2, $result->content);
        $this->assertEquals(3, $result->category);
    }
    
   
    public function testUpdateFromObject() {

        //setup
        $contentCategory = $this->createValidObject();

        //update values
        $contentCategory->section = 4;
        $contentCategory->content = 5;
        $contentCategory->category = 6;

        $result = $this->service->update($contentCategory);

        $this->assertInstanceOf('Content_Model_ContentCategory_Interface', $result);

        $this->assertEquals($contentCategory->id, $result->id);
        $this->assertEquals(4, $result->section);
        $this->assertEquals(5, $result->content);
        $this->assertEquals(6, $result->category);
    }
    
    public function testUpdateFromArray() {

        //setup
        $contentCategory = $this->createValidObject();

        $array = $contentCategory->toArray();
        
        //update values
        $array['section'] = 4;
        $array['content'] = 5;
        $array['category'] = 6;

        $result = $this->service->update($array);

        $this->assertInstanceOf('Content_Model_ContentCategory_Interface', $result);

        $this->assertEquals($contentCategory->id, $result->id);
        $this->assertEquals(4, $result->section);
        $this->assertEquals(5, $result->content);
        $this->assertEquals(6, $result->category);
    }
    

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }

    public function testDeleteObject() {

        //setup
        $contentCategory = $this->createValidObject();

        //test delete
        $this->service->delete($contentCategory);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($contentCategory->id);
    }

    public function testDeleteId() {

        //setup
        $contentCategory = $this->createValidObject();
       // $this->fail("id: ".$contentCategory->id);
        $this->service->delete((int)$contentCategory->id);
        
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($contentCategory->id); 
    }
    
    public function testDeleteArray() {

        //setup
        $contentCategory = $this->createValidObject();
       // $this->fail("id: ".$contentCategory->id);
        $this->service->delete($contentCategory->toArray());
        
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($contentCategory->id); 
    }
    
    public function testDeleteBySection() {

        //setup
        $object = $this->createValidObject();

        //test delete
        $this->service->deleteBySection($object->section);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDeleteException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }

    public function testDeleteAll() {
//        $this->service->deleteAll();
    }

}