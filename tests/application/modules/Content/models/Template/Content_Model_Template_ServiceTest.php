<?php

//require_once dirname(__FILE__) . '/../../../../../../application/modules/Content/models/Section/Content/Service.php';

/**
 * Test class for Content_Model_Template_Service.
 * Generated by PHPUnit on 2011-06-22 at 08:15:15.
 */
class Content_Model_Template_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Content_Model_Template_Service
     */
    protected $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->service = new Content_Model_Template_Service;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
//      $this->service->deleteAll();
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Content_Model_Template_MapperInterface', $this->service->getMapper());
    }

    /**
     * @todo Implement testSetMapper().
     */
    public function testSetMapper() {
        
        $mapper = new Content_Model_Template_MapperDbTable();
         $this->service->setMapper($mapper);
        
        $this->assertInstanceOf('Content_Model_Template_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
        //$this->ass
    }

    private function createValidObject() {
        $object = new Content_Model_Template();
        
        //$content->id = 1;
       // $content->revision = 2;
        $object->owner = 1;
        $object->section = 2;
        $object->autosave = false;
        $object->url = 'testUrl';
        $object->type = 1;
        $object->visible = true;
        $object->active = true;
        $object->content = 'testContent';
   
        $result = $this->service->create($object);

        $this->assertInstanceOf('Content_Model_Template_Interface', $result);
        return $result;
    }
    
    public function testCreateInvalidContent() {
        
        $object = new Content_Model_Template();
        $object->owner = 1;
        $object->section = 2;
        $object->autosave = false;
        $object->type = 1;
        $object->visible = true;
        $object->active = true;
        $object->content = '';
        $this->setExpectedException('Exception');
        $result = $this->service->create($content);
    }
//    
//    public function testDuplicateUrl() {
//
//        $content1 = $this->createValidContent();
//        $this->setExpectedException('DuplicateEntryException');
//        $content2 = $this->createValidContent();
//    }

    public function testCreateValidFromObject() {

        $result = $this->createValidObject();

        $this->assertNotNull($result->id);
        $this->assertNotNull($result->revision);
        $this->assertEquals(1, $result->owner);
        $this->assertEquals(2, $result->section);
        $this->assertEquals(false, $result->autosave);
        $this->assertEquals('testUrl', $result->url);
        $this->assertEquals(1, $result->type);
        $this->assertEquals(true, $result->visible);
        $this->assertEquals(true, $result->active);
        $this->assertEquals('testContent', $result->content);
    }
    
     public function testCreateDuplicateObject() {

        $this->markTestIncomplete();
         
//        $result = $this->createValidObject();
//
//        $this->setExpectedException('DuplicateEntryException'); 
//        $result = $this->createValidObject();
    }
    
    
    
//     public function testToArray() {
//
//        $content = new Content_Model_Template();
//        
//        $content->status = 0;
//        $content->primary_group = 1;
//        $content->username = 'testContentname';
//        $content->name = 'testName';
//        $content->location = 'testLocation';
//        $content->email = 'test@test.com';
//        $content->permissions = null;
//        $content->settings = array('test' => 'value');
//
//        $array = $content->toArray();
//        
//        $this->assertArrayHasKey('primary_group', $array);
//        $this->assertEquals(1, $array['primary_group']);
//    }
    
    public function testCreateFromArray() {

        $content = array(
//            'id' => 1,
            'owner' => 1,
            'section' => 2,
            'autosave' => false,
            'url' => 'testUrl',
            'type' => 1,
            'visible' => true,
            'active' => true,
            'content' => 'testContent');
        
        

        $result = $this->service->create($content);

        $this->assertInstanceOf('Content_Model_Template_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertNotNull($result->revision);
        $this->assertEquals(1, $result->owner);
        $this->assertEquals(2, $result->section);
        $this->assertEquals(false, $result->autosave);
        $this->assertEquals('testUrl', $result->url);
        $this->assertEquals(1, $result->type);
        $this->assertEquals(true, $result->visible);
        $this->assertEquals(true, $result->active);
        $this->assertEquals('testContent', $result->content);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->create($badObject);
    }

    public function testGetObjectById() {

        //setup
        $content = $this->createValidObject();

        //test getObject
        $result = $this->service->getObjectByIdRevision($content->id,$content->revision);
        
        $this->assertInstanceOf('Content_Model_Template_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertNotNull($result->revision);
        $this->assertEquals(1, $result->owner);
        $this->assertEquals(2, $result->section);
        $this->assertEquals(false, $result->autosave);
        $this->assertEquals('testUrl', $result->url);
        $this->assertEquals(1, $result->type);
        $this->assertEquals(true, $result->visible);
        $this->assertEquals(true, $result->active);
        $this->assertEquals('testContent', $result->content);
    }
    
//    public function testGetObjectByUrl() {
//
//        //setup
//        $content = $this->createValidContent();
//
//        //test getObject
//        $result = $this->service->getObjectByUrl($content->url);
//        
//        $this->assertInstanceOf('Content_Model_Template_Interface', $result);
//
//        $this->assertEquals($content->id, $result->id);
//        $this->assertEquals(0, $result->set);
//        $this->assertEquals(1, $result->parent);
//        $this->assertEquals(2, $result->order);
//        $this->assertEquals('testUrl', $result->url);
//        $this->assertEquals('testTitle', $result->title);
//        $this->assertEquals('testDescription', $result->description);
//    }
//    
//     public function testGetInvalidObjectByUrl() {
//
//        $this->setExpectedException('NotFoundException');
//        $result = $this->service->getObjectByUrl("testnotindatabase");
//
//    }

    public function testUpdateFromObject() {

        //setup
        $object = $this->createValidObject();

        //update values
        $object->owner = 3;
        $object->section = 4;
        $object->autosave = true;
        $object->url = 'testUrl2';
        $object->type = 2;
        $object->visible = false;
         $object->active = false;
        $object->content = 'testContent2';


        $result = $this->service->update($object);

        $this->assertInstanceOf('Content_Model_Template_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertNotNull($result->revision);
        $this->assertEquals(3, $result->owner);
        $this->assertEquals(4, $result->section);
        $this->assertEquals(true, $result->autosave);
        $this->assertEquals('testUrl2', $result->url);
        $this->assertEquals(2, $result->type);
        $this->assertEquals(false, $result->visible);
        $this->assertEquals(false, $result->active);
        $this->assertEquals('testContent2', $result->content);
    }
    
    public function testUpdateFromArray() {

        //setup
        $object = $this->createValidObject();

        $array = $object->toArray();
        
        //update values      
        $array['owner'] = 3;    
        $array['section'] = 4;
        $array['autosave'] = true;
        $array['url'] = 'testUrl2';
        $array['type'] = 2; 
        $array['visible'] = false;  
        $array['active'] = false;   
        $array['content'] = 'testContent2';

        $result = $this->service->update($array);

        $this->assertInstanceOf('Content_Model_Template_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertNotNull($result->revision);
        $this->assertEquals(3, $result->owner);
        $this->assertEquals(4, $result->section);
        $this->assertEquals(true, $result->autosave);
        $this->assertEquals('testUrl2', $result->url);
        $this->assertEquals(2, $result->type);
        $this->assertEquals(false, $result->visible);
        $this->assertEquals(false, $result->active);
        $this->assertEquals('testContent2', $result->content);
    }
    

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }

    public function testDeleteObject() {

        //setup
        $content = $this->createValidObject();

        //test delete
        $this->service->delete($content);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectByIdRevision($content->id,$content->revision);
    }
    
    public function testDeleteBySection() {

        //setup
        $content = $this->createValidObject();

        //test delete
        $this->service->deleteBySection($content->section);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectByIdRevision($content->id,$content->revision);
    }

//    public function testDeleteId() {
//
//        //setup
//        $content = $this->createValidContent();
//       // $this->fail("id: ".$content->id);
//        $this->service->delete((int)$content->id);
//        
//        $this->setExpectedException('NotFoundException');
//        $result = $this->service->getObjectByIdRevision($content->id,$content->revision); 
//    }
    
    public function testDeleteArray() {

        //setup
        $content = $this->createValidObject();
       // $this->fail("id: ".$content->id);
        $this->service->delete($content->toArray());
        
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectByIdRevision($content->id,$content->revision); 
//        $this->fail(debugArray($result));
    }

    public function testDeleteException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }

    public function testDeleteAll() {
//        $this->service->deleteAll();
    }

}