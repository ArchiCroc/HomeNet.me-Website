<?php

/**
 * Test class for HomeNet_Model_House_Service.
 * Generated by PHPUnit on 2011-11-21 at 16:35:40.
 */
class HomeNet_Model_House_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var HomeNet_Model_House_Service
     */
    protected $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
        $homnetInstaller = new HomeNet_Installer();
        $homnetInstaller->uninstallTest();
        
        $this->service = new HomeNet_Model_House_Service;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    private function _getTestData($seed = 0){
        return array(
         'status' => 1 + $seed,
        'url' => 'my-house'.$seed,
        'name' => 'My House'.$seed,
        'description' => 'My Description'.$seed,
        'location' => 'My Location'.$seed,
        'gps' => "$seed, $seed",
        'type' => 'house',
        'regions' => array(5,6,7,$seed),
        'settings' => array('key'=>'value'.$seed),
        'database' => $seed);
    }
    
    private function _fillObject($object, $data){
        foreach($data as $key => $value){
            $object->$key = $value;
        }
        return $object;
    }
    
    
    private function _createValidObject() {
        $object = new HomeNet_Model_House();
        $object = $this->_fillObject($object, $this->_getTestData());
        $result = $this->service->create($object);

        $this->assertInstanceOf('HomeNet_Model_House_Interface', $result);
        return $result;
    }
    
    private function _validateResult($result, $seed = 0){
        $this->assertInstanceOf('HomeNet_Model_House_Interface', $result);
        $this->assertNotNull($result->id);
        $this->assertEquals(1 + $seed, $result->status);
        $this->assertEquals('my-house'.$seed, $result->url);
        $this->assertEquals('My House'.$seed, $result->name);
        $this->assertEquals('My Description'.$seed, $result->description);
        $this->assertEquals('My Location'.$seed, $result->location);
        $this->assertEquals("$seed, $seed", $result->gps);
        $this->assertEquals('house', $result->type);
        $this->assertTrue(is_array($result->regions));
        $this->assertEquals(4, count($result->regions),print_r($result->regions,true));
        $this->assertTrue(is_array($result->settings));
        $this->assertEquals('value'.$seed, $result->settings['key']);
        $this->assertEquals($seed, $result->database);
    }

//$this->service->getMapper()///////////////////////////////////////////////////    
    public function testGetMapper() {
       $this->assertInstanceOf('HomeNet_Model_House_MapperInterface', $this->service->getMapper());
    }

//$this->service->setMapper($mapper)////////////////////////////////////////////
    public function testSetMapper() {
        $mapper = new HomeNet_Model_House_MapperDbTable();
         $this->service->setMapper($mapper);
        
        $this->assertInstanceOf('HomeNet_Model_House_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
    }

    public function testGetCacheMapper() {
        $this->assertInstanceOf('HomeNet_Model_House_MapperInterface', $this->service->getCacheMapper());
    }

    public function testSetCacheMapper() {
        $parent = new HomeNet_Model_House_MapperDbTable();
        $mapper = new HomeNet_Model_House_MapperCache($parent);
         $this->service->setCacheMapper($mapper);
        
        $this->assertInstanceOf('HomeNet_Model_House_MapperInterface', $this->service->getCacheMapper());
        $this->assertEquals($mapper, $this->service->getCacheMapper());
    }

    public function testEnableCache() {
        $this->service->enableCache();
    }

    public function testDisableCache() {
       $this->service->disableCache();
    }

    public function testCacheEnabled() {
        $this->service->enableCache();
        $this->assertTrue($this->service->cacheEnabled());
        $this->service->disableCache();
        $this->assertFalse($this->service->cacheEnabled());
    }
    
//$this->service->getObjectById($id)////////////////////////////////////////////
    public function testGetObjectById_valid() {
        $object = $this->_createValidObject();

        $result = $this->service->getObjectById($object->id);

        $this->_validateResult($result);
    }

    public function testGetObjectById_invalid() {
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById(1000);
    }

    public function testGetObjectById_null() {
        $this->setExpectedException('InvalidArgumentException');
        $result = $this->service->getObjectById(null);
    }

//$this->service->getObjectByIdWithRooms($id)///////////////////////////////////
    public function testGetObjectByIdWithRooms_valid() {
        $object = $this->_createValidObject();

        $result = $this->service->getObjectByIdWithRooms($object->id);

        $this->_validateResult($result);
    }
    
    public function testGetObjectByIdWithRooms_invalid() {
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectByIdWithRooms(1000);
    }
    
    public function testGetObjectByIdWithRooms_null() {
        $this->setExpectedException('InvalidArgumentException');
        $result = $this->service->getObjectByIdWithRooms(null);
    }

//$this->service->getObjectsByIds($ids)/////////////////////////////////////////
    public function testGetObjectsByIds_valid() {
        $object = $this->_createValidObject();

        $results = $this->service->getObjectsByIds(array($object->id));

        $this->_validateResult(reset($results));
    }
    
    public function testGetObjectsByIds_invalid() {
        $this->service->getObjectsByIds(array(1000,1001));
    }

//$this->service->getObjectsByIdsWithRooms($ids)////////////////////////////////
    public function testGetObjectsByIdsWithRooms() {
        
        $object = $this->_createValidObject();
        $results = $this->service->getObjectsByIdsWithRooms(array($object->id));

        $this->_validateResult(reset($results));
    }

//$this->service->getHouseIdsByUser($user)//////////////////////////////////////
//    public function testGetHouseIdsByUser_valid() {
//        $object = $this->createValidObject();
//        
//       $installer = new Core_Installer();
//        
//        
//      $user = Core_Model_User_Manager::getUser();
//       $result = $this->service->getHouseIdsByUser($user->id);
//    }
    public function testGetHouseIdsByUser_invalidArgument() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getHouseIdsByUser('StringUser');
    }
    
//$this->service->getRegionsById($id)///////////////////////////////////////////
    public function testGetRegionsById_valid() {
        $object = $this->_createValidObject();
        $result = $this->service->getRegionsById($object->id);
    }
    public function testGetRegionsById_invalid() {
        $this->setExpectedException('NotFoundException');
        $this->service->getRegionsById(1000);
    }
    public function testGetRegionsById_null() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getRegionsById(null);
    }
    
//$this->service->getTypes()////////////////////////////////////////////////////
    public function testGetTypes(){
        $this->assertTrue(is_array($this->service->getTypes()));
        $this->assertGreaterThan(1, count($this->service->getTypes()));
    }
    
//$this->service->getRegions()////////////////////////////////////////////////////
    public function testGetRegions_all(){
        
        $regions = $this->service->getRegions();
        
        $this->assertTrue(is_array($regions));
        $this->assertGreaterThan(1, count($regions));
    }
    
    public function testGetRegions_limit(){
        
        $regions = $this->service->getRegions(array(1,2,3));
        
        $this->assertTrue(is_array($regions));
        $this->assertEquals(3, count($regions));
    }
    
   
//$this->service->create($mixed)////////////////////////////////////////////////
    public function testCreate_validObject() {
        $result = $this->_createValidObject();

        $this->assertNotNull($result->id);
        $this->_validateResult($result);
    }

    public function testCreate_validArray() {
        $array = $this->_getTestData();
        $result = $this->service->create($array);
        $this->_validateResult($result);
    }

    public function testCreate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $this->service->create($badObject);
    }
    
//$this->service->update($mixed)////////////////////////////////////////////////
    public function testUpdate_validObject() {
        //setup
        $object = $this->_createValidObject();

        //update values
        $object = $this->_fillObject($object, $this->_getTestData(1));

        $result = $this->service->update($object);

        $this->_validateResult($result, 1);
    }

    public function testUpdate_validArray() {
        //setup
        $object = $this->_createValidObject();
        $array = array_merge($object->toArray(), $this->_getTestData(1));

        $result = $this->service->update($array);

        $this->_validateResult($result, 1);
    }

    public function testUpdate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }
    
//$this->service->delete($mixed)////////////////////////////////////////////////
    public function testDelete_validObject() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $id = $object->id;
        $this->service->delete($object);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($id);
    }

    public function testDelete_validArray() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $id = $object->id;
        $this->service->delete($object->toArray());

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($id);
    }

    public function testDelete_validId() {
        //setup
        $object = $this->_createValidObject();

        //test delete
        $id = $object->id;
        $this->service->delete($object->id);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($id);
    }

    public function testDelete_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }
}