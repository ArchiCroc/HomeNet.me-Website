<?php
/**
 * Test class for CMS_View_Helper_Messages.
 * Generated by PHPUnit on 2011-11-16 at 19:36:50.
 */
class CMS_View_Helper_MessagesTest extends PHPUnit_Framework_TestCase {

    /**
     * @var CMS_View_Helper_Messages
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        unset($_SESSION);
        $this->object = new CMS_View_Helper_Messages;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testMessages() {
        $result = $this->object;
        
        $this->assertInstanceOf('CMS_View_Helper_Messages', $result);
    }
    
    public function testGetContainer(){
        $result = $this->object->getContainer();
        
        $this->assertTrue(is_array($result));
    }

    public function testAdd() {
        $this->object->add('%%title%%', '%%content%%', 'notice', true);
        
        $result = $this->object->getContainer();
        
        $result = current($result);
        
        $this->assertEquals('%%title%%', $result['title']);
        $this->assertEquals('%%content%%', $result['content']);
        $this->assertEquals('notice', $result['type']);
        $this->assertTrue($result['persistent']);
        
        $result = $_SESSION['messages'];
    }

    public function testRenderMessage() {

        $result = $this->object->renderMessage('%%hash%%', '%%title%%', '%%content%%', 'notice', false);
        
        $this->assertContains('%%title%%', $result);
        $this->assertContains('%%content%%', $result);
    }
    
     public function testRender() {
         
        $this->object->add('%%title%%', '%%content%%', 'notice', false);
        $this->object->add('%%title2%%', '%%content2%%', 'notice', false);
        
        $result = (string) $this->object;
        
        $this->assertContains('%%title%%', $result);
        $this->assertContains('%%content%%', $result);
        
        $this->assertContains('%%title2%%', $result);
        $this->assertContains('%%content2%%', $result);
    }
    
    public function test__toString() {
        
        $this->object->add('%%title%%', '%%content%%', 'notice', false);
        
        $result = (string) $this->object;
        
        $this->assertContains('%%title%%', $result);
        $this->assertContains('%%content%%', $result);
    }

}