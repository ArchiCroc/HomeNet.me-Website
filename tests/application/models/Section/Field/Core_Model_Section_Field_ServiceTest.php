<?php

require_once dirname(__FILE__) . '/../../../../../application/models/Section/Field/Service.php';

/**
 * Test class for Core_Model_SectionField_Service.
 * Generated by PHPUnit on 2011-06-22 at 08:14:24.
 */
class Core_Model_Section_Field_ServiceTest extends PHPUnit_Framework_TestCase {

   /**
     * @var Core_Model_Section_Field_Service
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Core_Model_Section_Field_Service();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
       $this->object->deleteAll();
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Core_Model_Section_Field_MapperInterface', $this->object->getMapper());
    }

    /**
     * @todo Implement testSetMapper().
     */
    public function testSetMapper() {
        
        $mapper = new Core_Model_Section_Field_MapperDbTable();
         $this->object->setMapper($mapper);
        
        $this->assertInstanceOf('Core_Model_Section_Field_MapperInterface', $this->object->getMapper());
        $this->assertEquals($mapper, $this->object->getMapper());
        //$this->ass
    }
    
    private function createValidSectionField() {
        $field = new Core_Model_Section_Field();
        $field->section = 1;
        $field->order = 2;
        $field->name = 'testName';
        $field->name_label = 'testLabel';
        $field->default_value = 'testValue';
        $field->validators = array('test'=>'value');
        $field->filters = array('test'=>'value');
        $field->locked = false;
        $field->edit_name = true;
        $field->required = false;
        $field->visible = true;

        $result = $this->object->create($field);

        $this->assertInstanceOf('Core_Model_Section_Field_Interface', $result);
        return $result;
    }
    
    public function testCreateInvalidSectionField() {
        $field = new Core_Model_Section_Field();
        $field->section = 1;
        $field->order = 2;
        //$field->name = 'testName';
        $field->name_label = 'testLabel';
        $field->default_value = 'testValue';
        $field->validators = array('test'=>'value');
        $field->filters = array('test'=>'value');
        $field->locked = false;
        $field->edit_name = true;
        $field->required = false;
        $field->visible = true;
        $this->setExpectedException('Exception');
        $result = $this->object->create($field);
    }
//    
//    public function testDuplicateUrl() {
//
//        $field1 = $this->createValidSectionField();
//        $this->setExpectedException('DuplicateEntryException');
//        $field2 = $this->createValidSectionField();
//    }

    public function testCreateValidFromObject() {

        $result = $this->createValidSectionField();       

        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->section);
        $this->assertEquals(2, $result->order);
        $this->assertEquals('testName', $result->name);
        $this->assertEquals('testLabel', $result->name_label);
        $this->assertEquals('testValue', $result->default_value);
        $this->assertEquals('value', $result->validators['test']);
        $this->assertEquals('value', $result->filters['test']);
        $this->assertEquals(false, $result->locked);
        $this->assertEquals(true, $result->edit_name);
        $this->assertEquals(false, $result->required);
        $this->assertEquals(true, $result->visible);
    }
    
    public function testCreateFromArray() {

        $field = array(
            'section' => 1,
            'order' => 2,
            'name' => 'testName',
            'name_label' => 'testLabel',
            'default_value' => 'testValue',
            'validators' => array('test' => 'value'),
            'filters' => array('test' => 'value'),
            'locked' => false,
            'edit_name' => true,
            'required' => false,
            'visible' => true);

        $result = $this->object->create($field);

        $this->assertInstanceOf('Core_Model_Section_Field_Interface', $result);

         $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->section);
        $this->assertEquals(2, $result->order);
        $this->assertEquals('testName', $result->name);
        $this->assertEquals('testLabel', $result->name_label);
        $this->assertEquals('testValue', $result->default_value);
        $this->assertEquals('value', $result->validators['test']);
        $this->assertEquals('value', $result->filters['test']);
        $this->assertEquals(false, $result->locked);
        $this->assertEquals(true, $result->edit_name);
        $this->assertEquals(false, $result->required);
        $this->assertEquals(true, $result->visible);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->create($badObject);
    }

    public function testGetObjectById() {

        //setup
        $field = $this->createValidSectionField();

        //test getObject
        $result = $this->object->getObjectById($field->id);
        
        $this->assertInstanceOf('Core_Model_Section_Field_Interface', $result);
        
        $this->assertEquals($field->id, $result->id);
        $this->assertEquals(1, $result->section);
        $this->assertEquals(2, $result->order);
        $this->assertEquals('testName', $result->name);
        $this->assertEquals('testLabel', $result->name_label);
        $this->assertEquals('testValue', $result->default_value);
        $this->assertEquals('value', $result->validators['test']);
        $this->assertEquals('value', $result->filters['test']);
        $this->assertEquals(false, $result->locked);
        $this->assertEquals(true, $result->edit_name);
        $this->assertEquals(false, $result->required);
        $this->assertEquals(true, $result->visible);
    }
    
//    public function testGetObjectByUrl() {
//
//        //setup
//        $field = $this->createValidSectionField();
//
//        //test getObject
//        $result = $this->object->getObjectByUrl($field->url);
//        
//        $this->assertInstanceOf('Core_Model_Section_Field_Interface', $result);
//
//        $this->assertEquals($field->id, $result->id);
//        $this->assertEquals(0, $result->set);
//        $this->assertEquals(1, $result->parent);
//        $this->assertEquals(2, $result->order);
//        $this->assertEquals('testUrl', $result->url);
//        $this->assertEquals('testTitle', $result->title);
//        $this->assertEquals('testDescription', $result->description);
//    }
//    
//     public function testGetInvalidObjectByUrl() {
//
//        $this->setExpectedException('NotFoundException');
//        $result = $this->object->getObjectByUrl("testnotindatabase");
//
//    }

    public function testUpdateFromObject() {

        //setup
        $field = $this->createValidSectionField();

        //update values
        $field->section = 2;
        $field->order = 3;
        $field->name = 'testName2';
        $field->name_label = 'testLabel2';
        $field->default_value = 'testValue2';
        $field->validators = array('test'=>'value2');
        $field->filters = array('test'=>'value2');
        $field->locked = true;
        $field->edit_name = false;
        $field->required = true;
        $field->visible = false;

        $result = $this->object->update($field);

        $this->assertInstanceOf('Core_Model_Section_Field_Interface', $result);
        $this->assertEquals($field->id, $result->id);
        $this->assertEquals(2, $result->section);
        $this->assertEquals(3, $result->order);
        $this->assertEquals('testName2', $result->name);
        $this->assertEquals('testLabel2', $result->name_label);
        $this->assertEquals('testValue2', $result->default_value);
        $this->assertEquals('value2', $result->validators['test']);
        $this->assertEquals('value2', $result->filters['test']);
        $this->assertEquals(true, $result->locked);
        $this->assertEquals(false, $result->edit_name);
        $this->assertEquals(true, $result->required);
        $this->assertEquals(false, $result->visible);
    }
    
    public function testUpdateFromArray() {

        //setup
        $field = $this->createValidSectionField();

        $array = $field->toArray();
        
        //update values
        $array['section'] = 2;
        $array['order'] = 3;
        $array['name'] = 'testName2';
        $array['name_label'] = 'testLabel2';
        $array['default_value'] = 'testValue2';
        $array['validators'] = array('test'=>'value2');
        $array['filters'] = array('test'=>'value2');
        $array['locked'] = true;
        $array['edit_name'] = false;
        $array['required'] = true;
        $array['visible'] = false;


        $result = $this->object->update($array);

        $this->assertInstanceOf('Core_Model_Section_Field_Interface', $result);
        $this->assertEquals($field->id, $result->id);
        $this->assertEquals(2, $result->section);
        $this->assertEquals(3, $result->order);
        $this->assertEquals('testName2', $result->name);
        $this->assertEquals('testLabel2', $result->name_label);
        $this->assertEquals('testValue2', $result->default_value);
        $this->assertEquals('value2', $result->validators['test']);
        $this->assertEquals('value2', $result->filters['test']);
        $this->assertEquals(true, $result->locked);
        $this->assertEquals(false, $result->edit_name);
        $this->assertEquals(true, $result->required);
        $this->assertEquals(false, $result->visible);
    }
    

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->update($badObject);
    }

    public function testDeleteObject() {

        //setup
        $field = $this->createValidSectionField();

        //test delete
        $this->object->delete($field);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($field->id);
    }

    public function testDeleteId() {

        //setup
        $field = $this->createValidSectionField();
       // $this->fail("id: ".$field->id);
        $this->object->delete((int)$field->id);
        
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($field->id); 
    }
    
    public function testDeleteArray() {

        //setup
        $field = $this->createValidSectionField();
       // $this->fail("id: ".$field->id);
        $this->object->delete($field->toArray());
        
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($field->id); 
    }

    public function testDeleteException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->delete($badObject);
    }

    public function testDeleteAll() {
//        $this->object->deleteAll();
    }

}

?>
