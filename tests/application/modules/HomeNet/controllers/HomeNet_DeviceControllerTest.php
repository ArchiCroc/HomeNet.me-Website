<?php

/**
 * Test class for HomeNet_DeviceController.
 * Generated by PHPUnit on 2012-04-27 at 14:47:30.
 */
class HomeNet_DeviceControllerTest extends CMS_Test_PHPUnit_ControllerTestCase {

    private $installer;
    private $homenetInstaller;
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->installer = new Core_Installer();
        $this->installer->installTest();
        $this->installer->loginAsSuperAdmin();


        $this->bootstrap = new Zend_Application('testing', APPLICATION_PATH . '/configs/application.ini'); //
        $this->view = Zend_Registry::get('view');

        $this->homenetInstaller = new HomeNet_Installer();
        $this->homenetInstaller->installTest(array('house', 'room', 'node', 'device'));

        $this->object = $this->homenetInstaller->node;

        //$this->service = new Content_Model_Category_Service();
        parent::setUp();

        $request = $this->getRequest();
        $this->setModule('HomeNet');
        $this->setController('Device');
        $this->getRequest()->setParam('house', $this->homenetInstaller->house->id);
        $this->getRequest()->setParam('node', $this->homenetInstaller->node->id);
    }

    protected function _getTestData($seed = 0) {

        $array = array(
            'status' => HomeNet_Model_Node::STATUS_LIVE,
            'house' => $this->homenetInstaller->house->id,
            'node' => 0,
            'model' => $this->homenetInstaller->deviceModel->id,
            'position' => 3 + $seed,
            'components' => 4 + $seed,
            'fixed' => false,
            'settings' => array('key' => 'value' . $seed));

        return $array;
    }

    protected function _getBadTestData($version = 0) {

        $array = $this->_getTestData();
        if ($version == 0) {
            $array['status'] = 10;
        }
        return $array;
    }

//indexAction///////////////////////////////////////////////////////////////   
//    public function testIndexAction() {
//        //setup
//        $this->setAction('Index');
//
//        //run
//        $this->dispatch();
//
//        $this->assertACM();
//    }

//trashedAction///////////////////////////////////////////////////////////////
    public function testTrashedAction() {
        //setup
        $this->setAction('Trashed');

        //run
        $this->dispatch();

        $this->assertACM();
    }

//newAction////////////////////////////////////////////////////////////////////
    public function testNewAction_firstView() {
        //setup
        $this->setAction('New');

        //run
        $this->dispatch();

        $this->assertACM();
        $this->assertNotRedirect();
    }

//    public function testNewAction_submitInvalid() {
//        //setup
//        $this->setAction('New');
//
//        $this->getRequest()->setMethod('POST')
//                ->setPost($this->_getBadTestData());
//
//        //run
//        $this->dispatch();
//
//        $this->assertACM();
//        $this->assertNotRedirect();
//    }
//
//    public function testNewAction_submitValid() {
//        //setup
//        $this->setAction('New');
//        $this->getRequest()->setMethod('POST')
//                ->setPost($this->_getTestData());
//
//        //run
//        $this->dispatch();
//        // die($this->getResponse()->getBody());
//        $this->assertACM();
//        $this->assertRedirect();
//    }

//new2Action////////////////////////////////////////////////////////////////////
    public function testNew2Action_firstView() {
        //setup
        $this->setAction('New2');

        //run
        $this->dispatch();

        $this->assertACM();
        $this->assertNotRedirect();
    }

    public function testNew2Action_submitInvalid() {
        //setup
        $this->setAction('New2');

        $this->getRequest()->setMethod('POST')
                ->setPost($this->_getBadTestData());

        //run
        $this->dispatch();

        $this->assertACM();
        $this->assertNotRedirect();
    }

    public function testNew2Action_submitValid() {
        //setup
        $this->setAction('New2');
        $this->getRequest()->setMethod('POST')
                ->setPost($this->_getTestData());

        //run
        $this->dispatch();
        // die($this->getResponse()->getBody());
        $this->assertACM();
        $this->assertRedirect();
    }

//editAction////////////////////////////////////////////////////////////////////
    public function testEditAction_firstView() {
        //setup
        $this->setAction('Edit');
        $this->getRequest()->setParam('id', $this->object->id);

        //run
        $this->dispatch();

        $this->assertACM();
//        $this->assertContains($this->object->name, $this->response->outputBody()); //make sure data is in the form
        $this->assertNotRedirect();
    }

    public function testEditAction_submitInvalid() {
        //setup
        $this->setAction('Edit');
        $this->getRequest()->setParam('id', $this->object->id);
        $this->getRequest()->setMethod('POST')
                ->setPost($this->_getBadTestData());
        //run
        $this->dispatch();

        $this->assertACM();
        $this->assertNotRedirect();
    }

    public function testEditAction_submitValid() {
        //setup
        $this->setAction('Edit');
        $this->getRequest()->setParam('id', $this->object->id);
        $this->getRequest()->setMethod('POST')
                ->setPost($this->_getTestData(1));

        //run
        $this->dispatch();

        $this->assertACM('Edit');
        $this->assertRedirect();
    }

//trashAction////////////////////////////////////////////////////////////////////
    public function testTrashAction_firstView() {
        //setup
        $this->setAction('Trash');
        $this->getRequest()->setParam('id', $this->object->id);

        //show form
        $this->dispatch();

        $this->assertACM();
//        $this->assertContains($this->object->name, $this->response->outputBody()); //make sure data is in the form
        $this->assertNotRedirect();
    }

    public function testTrashAction_submitCancel() {
        //setup
        $this->setAction('Trash');
        $this->getRequest()->setParam('id', $this->object->id);
        $this->getRequest()->setMethod('POST')
                ->setPost(array('cancel' => 'cancel'));

        //run
        $this->dispatch();

        $this->assertACM();
        $this->assertRedirect();
    }

    public function testTrashAction_submitConfirm() {
        //setup
        $this->setAction('Trash');
        $this->getRequest()->setParam('id', $this->object->id);
        $this->getRequest()->setMethod('POST')
                ->setPost(array('confirm' => 'confirm'));

        //run
        $this->dispatch();

        $this->assertACM();
        $this->assertRedirect();
    }

//unTrashAction////////////////////////////////////////////////////////////////////
    public function testUntrashAction_firstView() {
        //setup
        $this->setAction('Untrash');
        $this->getRequest()->setParam('id', $this->object->id);

        //show form
        $this->dispatch();

        $this->assertACM();
        //  $this->assertContains($this->object->name, $this->response->outputBody()); //make sure data is in the form
        $this->assertNotRedirect();
    }

    public function testUntrashAction_submitCancel() {
        //setup
        $this->setAction('Untrash');
        $this->getRequest()->setParam('id', $this->object->id);
        $this->getRequest()->setMethod('POST')
                ->setPost(array('cancel' => 'cancel'));

        //run
        $this->dispatch();

        $this->assertACM();
        $this->assertRedirect();
    }

    public function testUntrashAction_submitConfirm() {
        //setup
        $this->setAction('Untrash');
        $this->getRequest()->setParam('id', $this->object->id);
        $this->getRequest()->setMethod('POST')
                ->setPost(array('confirm' => 'confirm'));

        //run
        $this->dispatch();

        $this->assertACM();
        $this->assertRedirect();
    }

//deleteAction//////////////////////////////////////////////////////////////////
    public function testDeleteAction_firstView() {
        //setup
        $this->setAction('Delete');
        $this->getRequest()->setParam('id', $this->object->id);

        //show form
        $this->dispatch();

        $this->assertACM();
        // $this->assertContains($this->object->name, $this->response->outputBody()); //make sure data is in the form
        $this->assertNotRedirect();
    }

    public function testDeleteAction_submitCancel() {
        //setup
        $this->setAction('Delete');
        $this->getRequest()->setParam('id', $this->object->id);
        $this->getRequest()->setMethod('POST')
                ->setPost(array('cancel' => 'cancel'));

        //run
        $this->dispatch();

        $this->assertACM();
        $this->assertRedirect();
    }

    public function testDeleteAction_submitDelete() {
        //setup
        $this->setAction('Delete');
        $this->getRequest()->setParam('id', $this->object->id);
        $this->getRequest()->setMethod('POST')
                ->setPost(array('confirm' => 'confirm'));

        //run
        $this->dispatch();

        $this->assertACM();
        $this->assertRedirect();
    }

}