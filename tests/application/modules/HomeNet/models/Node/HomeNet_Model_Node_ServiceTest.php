<?php

/**
 * Test class for HomeNet_Model_Node_Service.
 * Generated by PHPUnit on 2011-11-21 at 16:35:57.
 */
class HomeNet_Model_Node_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var HomeNet_Model_Node_Service
     */
    protected $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->service = new HomeNet_Model_Node_Service;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->service->deleteAll();
        $service = new HomeNet_Model_NodeModel_Service;
        $service->deleteAll();
    }
    
    
    
    private function createValidObject() {
        
        //create node model
        $array = array('type' => HomeNet_Model_Node::SENSOR,
            'status' => HomeNet_Model_ComponentModel::LIVE,
            'plugin' => 'Jeenode',
            'name' => 'testModel',
            'description' => 'test description',
            'image' => 'test.jpg',
            'max_devices' => 4,
            'settings' => array('key' => 'value'));
        $service = new HomeNet_Model_NodeModel_Service;
        $model = $service->create($array);
                
        
        $object = new HomeNet_Model_Node();
        $object->address = 1;
        $object->model = $model->id;
        $object->uplink = 3;
        $object->house = 4;
        $object->room = 5;
        $object->description = 'test description';
        $object->settings = array('key' => 'value');

        $result = $this->service->create($object);

        $this->assertInstanceOf('HomeNet_Model_Node_Interface', $result);
        return $result;
    }
    
    private function validateResult($result){
        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->address);
      //  $this->assertEquals(2, $result->model);
        $this->assertEquals(3, $result->uplink);
        $this->assertEquals(4, $result->house);
        $this->assertEquals(5, $result->room);
        $this->assertEquals('test description', $result->description);
        $this->assertTrue(is_array($result->settings));
        $this->assertEquals('value', $result->settings['key']);
    }

//$this->service->getMapper()///////////////////////////////////////////////////    
    public function testGetMapper() {
       $this->assertInstanceOf('HomeNet_Model_Node_MapperInterface', $this->service->getMapper());
    }

//$this->service->setMapper($mapper)////////////////////////////////////////////
    public function testSetMapper() {
        $mapper = new HomeNet_Model_Node_MapperDbTable();
         $this->service->setMapper($mapper);
        
        $this->assertInstanceOf('HomeNet_Model_Node_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
    }

    public function testGetInternetMapper() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testSetInternetMapper() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
    
//$this->service->getObjectById($id)////////////////////////////////////////////
   public function testGetObjectById_valid() {
        $object = $this->createValidObject();

        $result = $this->service->getObjectById($object->id);

        $this->validateResult($result);
    }

    public function testGetObjectById_invalid() {
        $this->setExpectedException('NotFoundException');
        $this->service->getObjectById(1000);
    }

    public function testGetObjectById_null() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectById(null);
    }

    public function testGetObjectsByHouse() {
        $object = $this->createValidObject();
        $results = $this->service->getObjectsByHouse($object->house);
        $this->assertEquals(1, count($results));
        $this->validateResult($results[0]);
    }

    public function testGetObjectsByRoom() {
        $object = $this->createValidObject();
        $results = $this->service->getObjectsByRoom($object->room);
        $this->assertEquals(1, count($results));
        $this->validateResult($results[0]);
    }

    public function testGetObjectByHouseAddress() {
        $object = $this->createValidObject();
        $result = $this->service->getObjectByHouseAddress($object->house, $object->address);
        
        $this->validateResult($result);
    }

    public function testGetNextAddressByHouse() {
        $object = $this->createValidObject();
        $result = $this->service->getNextAddressByHouse($object->house);

        $this->assertGreaterThan($object->address, $result);
    }

    public function testGetInternetIdsByHouse() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testNewObjectByModel() {
        $object = $this->createValidObject();
        $result = $this->service->newObjectFromModel($object->model);
        
        $this->assertInstanceOf('HomeNet_Model_Node_Abstract', $result);
    }
    
//$this->service->create($mixed)////////////////////////////////////////////////
    public function testCreate_validObject() {
        $result = $this->createValidObject();

        $this->validateResult($result);
    }

    public function testCreate_validArray() {
        $array = array('address' => 1,
        'model' => 1,
        'uplink' => 3,
        'house' => 4,
        'room' => 5,
        'description' => 'test description',
        'settings' => array('key' => 'value'));
        
        $result = $this->service->create($array);

        $this->validateResult($result);
    }

    public function testCreate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $this->service->create($badObject);
    }
    
//$this->service->update($mixed)////////////////////////////////////////////////
    public function testUpdate_validObject() {
        //setup
        $object = $this->createValidObject();

        //update values
       $object->address = 2;
        $object->model = 3;
        $object->uplink = 4;
        $object->house = 5;
        $object->room = 6;
        $object->description = 'test description2';
        $object->settings = array('key' => 'value2');

        $result = $this->service->update($object);

        $this->assertInstanceOf('HomeNet_Model_Node_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(2, $result->address);
        $this->assertEquals(3, $result->model);
        $this->assertEquals(4, $result->uplink);
        $this->assertEquals(5, $result->house);
        $this->assertEquals(6, $result->room);
        $this->assertEquals('test description2', $result->description);
        $this->assertTrue(is_array($result->settings));
        $this->assertEquals('value2', $result->settings['key']);
    }

    public function testUpdate_validArray() {
        //setup
        $object = $this->createValidObject();
        $array = $object->toArray();

        //update values
        $array['address'] = 2;
        $array['model'] = 3;
        $array['uplink'] = 4;
        $array['house'] = 5;
        $array['room'] = 6;
        $array['description'] = 'test description2';
        $array['settings'] = array('key' => 'value2');

        $result = $this->service->update($array);

         $this->assertInstanceOf('HomeNet_Model_Node_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(2, $result->address);
        $this->assertEquals(3, $result->model);
        $this->assertEquals(4, $result->uplink);
        $this->assertEquals(5, $result->house);
        $this->assertEquals(6, $result->room);
        $this->assertEquals('test description2', $result->description);
        $this->assertTrue(is_array($result->settings));
        $this->assertEquals('value2', $result->settings['key']);
    }

    public function testUpdate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }

//$this->service->delete($mixed)////////////////////////////////////////////////    
    public function testDelete_validObject() {
        //setup
        $object = $this->createValidObject();

        //test delete
        $this->service->delete($object);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDelete_validArray() {
        //setup
        $object = $this->createValidObject();

        //test delete
        $this->service->delete($object->toArray());

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDelete_validId() {
        //setup
        $object = $this->createValidObject();

        //test delete
        $this->service->delete($object->id);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDelete_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }
}